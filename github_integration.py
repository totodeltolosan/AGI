#!/usr/bin/env python3
"""
Int√©gration GitHub API pour le projet AGI
Cr√©e automatiquement des issues pour les violations constitutionnelles
"""

import os
import sys
import requests
import csv
from datetime import datetime

class GitHubIntegration:
    def __init__(self, repo_owner, repo_name, token):
        self.repo_owner = repo_owner
        self.repo_name = repo_name
        self.token = token
        self.api_base = "https://api.github.com"
        self.headers = {
            "Authorization": f"token {token}",
            "Accept": "application/vnd.github.v3+json"
        }
    
    def create_violation_issue(self, violation):
        """Cr√©er une issue pour une violation constitutionnelle"""
        title = f"[VIOLATION] {violation['Fichier']} d√©passe la limite constitutionnelle"
        
        body = f"""## üèõÔ∏è Violation Constitutionnelle D√©tect√©e

**Fichier:** `{violation['Fichier']}`
**Lignes:** {violation['Lignes']} (exc√®s: +{violation['Exc√®s']})
**Date de d√©tection:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

### Action Requise
Ce fichier d√©passe la limite constitutionnelle de 200 lignes et doit √™tre refactoris√©.

### Suggestion de Correction
- D√©composer en {max(2, violation['Exc√®s'] // 100)} modules plus petits
- Appliquer les principes de responsabilit√© unique
- Maintenir la coh√©sion fonctionnelle

### Impact sur la Conformit√©
Cette violation contribue √† r√©duire notre taux de conformit√© constitutionnelle g√©n√©ral.

---
*Issue g√©n√©r√©e automatiquement par le syst√®me d'audit constitutionnel AGI*
"""

        url = f"{self.api_base}/repos/{self.repo_owner}/{self.repo_name}/issues"
        data = {
            "title": title,
            "body": body,
            "labels": ["constitutional-violation", "technical-debt", "automated"]
        }
        
        response = requests.post(url, headers=self.headers, json=data)
        return response.status_code == 201

    def process_conformity_report(self, csv_file):
        """Traiter un rapport de conformit√© CSV et cr√©er des issues"""
        violations_created = 0
        
        try:
            with open(csv_file, 'r', encoding='utf-8') as f:
                reader = csv.DictReader(f)
                for row in reader:
                    if row['Statut'] == 'VIOLATION':
                        if self.create_violation_issue(row):
                            violations_created += 1
                            print(f"‚úÖ Issue cr√©√©e pour {row['Fichier']}")
                        else:
                            print(f"‚ùå √âchec cr√©ation issue pour {row['Fichier']}")
        
        except FileNotFoundError:
            print(f"‚ùå Fichier {csv_file} non trouv√©")
            return 0
        
        return violations_created

if __name__ == "__main__":
    # Configuration
    REPO_OWNER = "totodeltolosan"
    REPO_NAME = "AGI"
    
    # Token GitHub (√† configurer en secret)
    token = os.getenv('GITHUB_TOKEN')
    if not token:
        print("‚ùå GITHUB_TOKEN non configur√©")
        sys.exit(1)
    
    # Traitement
    github = GitHubIntegration(REPO_OWNER, REPO_NAME, token)
    
    # Chercher le dernier rapport de conformit√©
    import glob
    reports = glob.glob("conformite_*.csv")
    if reports:
        latest_report = max(reports)
        print(f"üìä Traitement du rapport: {latest_report}")
        violations = github.process_conformity_report(latest_report)
        print(f"‚úÖ {violations} violations converties en issues")
    else:
        print("‚ùå Aucun rapport de conformit√© trouv√©")
