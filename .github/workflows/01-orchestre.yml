name: "üéº NIVEAU 1 : Orchestre - Ma√Ætre de la Constitution"
run-name: "üéº Audit Global AGI - Coordination des 8 G√©n√©raux de Division"

on:
  push:
    branches: [ main, develop ]
    paths-ignore:
      - '*.md'
      - 'docs/**'
      - '.gitignore'
  pull_request:
    branches: [ main, develop ]
    paths-ignore:
      - '*.md'
      - 'docs/**'
      - '.gitignore'
  workflow_dispatch:
    inputs:
      force_audit:
        description: 'Forcer audit m√™me sans changements significatifs'
        required: false
        type: boolean
      skip_generals:
        description: 'G√©n√©raux √† ignorer (csv: metreur,gardien,archiviste,greffier,archiviste_chef,cartographe,chercheur,auditeur)'
        required: false
        default: ''
        type: string
      urgency_level:
        description: 'Niveau urgence pour priorisation'
        required: false
        default: 'medium'
        type: choice
        options:
        - low
        - medium
        - high
        - critical
      constitution_override:
        description: 'Ignorer violations constitution (DANGEREUX)'
        required: false
        default: false
        type: boolean

env:
  CONSTITUTION_FILE: "iaGOD.json"
  AUDIT_ID: ${{ github.run_id }}-${{ github.run_attempt }}
  PARALLEL_LIMIT: 8
  TIMEOUT_CONSTITUTION: 5
  TIMEOUT_GENERAL: 30
  TIMEOUT_SYNTHESIS: 15
  ORCHESTRATEUR_VERSION: "1.0.0"

jobs:
  # ============================================
  # PHASE 1 : VALIDATION CONSTITUTION CRITIQUE
  # ============================================
  validate_constitution:
    name: "üèõÔ∏è Validation Constitution iaGOD.json"
    runs-on: ubuntu-latest
    timeout-minutes: 5
    outputs:
      constitution_valid: ${{ steps.validate.outputs.constitution_valid }}
      constitution_hash: ${{ steps.validate.outputs.constitution_hash }}
      laws_count: ${{ steps.validate.outputs.laws_count }}
      should_proceed: ${{ steps.validate.outputs.should_proceed }}
      version_constitution: ${{ steps.validate.outputs.version }}
      critical_laws: ${{ steps.validate.outputs.critical_laws }}

    steps:
    - name: "üì• Checkout Repository"
      uses: actions/checkout@v4
      with:
        fetch-depth: 2
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: "üêç Setup Python Optimized"
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: "üì¶ Install Constitution Dependencies"
      run: |
        pip install --upgrade pip
        pip install jsonschema==4.19.0 pydantic==2.4.0 rich==13.5.0 typer==0.9.0

    - name: "üîí V√©rification Existence Constitution"
      run: |
        if [ ! -f "${{ env.CONSTITUTION_FILE }}" ]; then
          echo "‚ùå ERREUR FATALE: Constitution ${{ env.CONSTITUTION_FILE }} introuvable"
          echo "::error::Constitution manquante - Audit impossible"
          exit 1
        fi
        echo "‚úÖ Constitution trouv√©e: $(wc -l < ${{ env.CONSTITUTION_FILE }}) lignes"

    - name: "üèõÔ∏è Validation Rigoureuse Constitution"
      id: validate
      run: |
        echo "üîç Lancement validation constitution..."
        python .github/scripts/orchestrateur.py validate-constitution \
          --file "${{ env.CONSTITUTION_FILE }}" \
          --audit-id "${{ env.AUDIT_ID }}" \
          --force-audit "${{ github.event.inputs.force_audit }}" \
          --constitution-override "${{ github.event.inputs.constitution_override }}" \
          --urgency "${{ github.event.inputs.urgency_level }}" \
          --github-context "${{ toJson(github) }}" \
          --verbose

    - name: "‚ùå √âchec - Constitution Invalide"
      if: steps.validate.outputs.constitution_valid != 'true'
      run: |
        echo "::error::La constitution '${{ env.CONSTITUTION_FILE }}' n'est pas conforme ou invalide."
        exit 1

    - name: "‚úÖ Succ√®s - Constitution Valid√©e"
      if: steps.validate.outputs.constitution_valid == 'true'
      run: |
        echo "Constitution valid√©e avec ${{ steps.validate.outputs.laws_count }} lois."
        echo "Hash de la constitution : ${{ steps.validate.outputs.constitution_hash }}"

    - name: "üíæ Upload Constitution Artifacts"
      uses: actions/upload-artifact@v4
      with:
        name: constitution-validated-${{ env.AUDIT_ID }}
        path: |
          constitution-parsed.json
          laws-extracted.json
          constitution-metadata.json
          constitution-hash.txt
        retention-days: 30
        compression-level: 9

  # ========================================
  # PHASE 2 : LANCEMENT PARALL√àLE 8 G√âN√âRAUX
  # ========================================
  deploy_generals:
    name: "‚ö° D√©ploiement 8 G√©n√©raux en Parall√®le"
    needs: validate_constitution
    if: needs.validate_constitution.outputs.should_proceed == 'true'
    strategy:
      fail-fast: false
      max-parallel: 8
      matrix:
        general:
          - name: "metreur"
            workflow: "02-loi-lignes.yml"
            title: "üìè Le M√©treur (Audit Lignes)"
            law_key: "lignes"
            priority: "CRITICAL"
            timeout: 15
            script: "audit_lignes.py"
          - name: "gardien"
            workflow: "03-loi-securite.yml"
            title: "üõ°Ô∏è Le Gardien (Audit S√©curit√©)"
            law_key: "securite"
            priority: "CRITICAL"
            timeout: 20
            script: "audit_securite.py"
          - name: "archiviste"
            workflow: "04-loi-documentation.yml"
            title: "üìö L'Archiviste (Audit Documentation)"
            law_key: "documentation"
            priority: "HIGH"
            timeout: 15
            script: "audit_documentation.py"
          - name: "greffier"
            workflow: "05-creation-issues.yml"
            title: "‚öñÔ∏è Le Greffier (Cr√©ation Issues)"
            law_key: "issues"
            priority: "MEDIUM"
            timeout: 10
            script: "creation_issues.py"
          - name: "archiviste_chef"
            workflow: "06-sauvegarde-rapports.yml"
            title: "üóÉÔ∏è L'Archiviste en Chef (Sauvegarde)"
            law_key: "sauvegarde"
            priority: "MEDIUM"
            timeout: 10
            script: "sauvegarde_rapports.py"
          - name: "cartographe"
            workflow: "07-controle-planuml.yml"
            title: "üó∫Ô∏è Le Cartographe (Contr√¥le PlantUML)"
            law_key: "planuml"
            priority: "HIGH"
            timeout: 12
            script: "audit_planuml.py"
          - name: "chercheur"
            workflow: "08-chercheur-solution.yml"
            title: "üî¨ Le Chercheur (Solutions)"
            law_key: "solutions"
            priority: "HIGH"
            timeout: 25
            script: "chercheur_solution.py"
          - name: "auditeur"
            workflow: "09-auditeur-solution.yml"
            title: "üîç L'Auditeur de Solution"
            law_key: "audit_solutions"
            priority: "HIGH"
            timeout: 20
            script: "auditeur_solution.py"

    uses: ./.github/workflows/${{ matrix.general.workflow }}
    secrets: inherit
    with:
      audit_id: ${{ env.AUDIT_ID }}
      urgency_level: ${{ github.event.inputs.urgency_level || 'medium' }}
      constitution_hash: ${{ needs.validate_constitution.outputs.constitution_hash }}
      orchestrator_version: ${{ env.ORCHESTRATEUR_VERSION }}
      skip_generals: ${{ github.event.inputs.skip_generals }}
      # Pass matrix context to the reusable workflow
      general_name: ${{ matrix.general.name }}
      law_key: ${{ matrix.general.law_key }}
      priority: ${{ matrix.general.priority }}
      timeout: ${{ matrix.general.timeout }}
      script: ${{ matrix.general.script }}

  # =====================================
  # PHASE 3 : SYNTH√àSE GLOBALE RIGOUREUSE
  # =====================================
  synthesize_audit:
    name: "üéØ Synth√®se Globale AGI"
    runs-on: ubuntu-latest
    needs: [validate_constitution, deploy_generals]
    if: always() && needs.validate_constitution.outputs.should_proceed == 'true'
    timeout-minutes: 15

    outputs:
      audit_status: ${{ steps.synthesize.outputs.audit_status }}
      total_violations: ${{ steps.synthesize.outputs.total_violations }}
      critical_violations: ${{ steps.synthesize.outputs.critical_violations }}
      recommendation: ${{ steps.synthesize.outputs.recommendation }}

    steps:
    - name: "üì• Checkout Repository"
      uses: actions/checkout@v4

    - name: "üì¶ Download All Artifacts"
      uses: actions/download-artifact@v4
      with:
        pattern: "*-${{ env.AUDIT_ID }}"
        path: ./artifacts-collected/
        merge-multiple: true

    - name: "üêç Setup Python for Synthesis"
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: "üì¶ Install Synthesis Dependencies"
      run: |
        pip install --upgrade pip
        pip install jsonschema pydantic rich typer jinja2 matplotlib seaborn

    - name: "üéØ Synth√®se Rigoureuse des 8 G√©n√©raux"
      id: synthesize
      run: |
        echo "üéØ Lancement synth√®se globale..."
        python .github/scripts/orchestrateur.py synthesize-audit \
          --artifacts-dir "./artifacts-collected/" \
          --audit-id "${{ env.AUDIT_ID }}" \
          --constitution-hash "${{ needs.validate_constitution.outputs.constitution_hash }}" \
          --urgency "${{ github.event.inputs.urgency_level }}" \
          --generals-count 8 \
          --timeout-exceeded "${{ contains(needs.deploy_generals.result, 'timeout') }}" \
          --verbose

    - name: "üìä G√©n√©ration Tableau de Bord"
      run: |
        python .github/scripts/orchestrateur.py generate-dashboard \
          --synthesis-file "rapport-global.json" \
          --audit-id "${{ env.AUDIT_ID }}" \
          --format "html,json,md" \
          --include-charts

    - name: "üíæ Upload Synth√®se Compl√®te"
      uses: actions/upload-artifact@v4
      with:
        name: synthese-globale-${{ env.AUDIT_ID }}
        path: |
          rapport-global.json
          rapport-global.md
          tableau-bord.html
          metriques-audit.json
          historique-violations.csv
        retention-days: 90
        compression-level: 9

    - name: "üèÅ Statut Final Audit AGI"
      run: |
        echo "üèÅ AUDIT AGI TERMIN√â"
        echo "üéØ Status: ${{ steps.synthesize.outputs.audit_status }}"
        echo "‚ö†Ô∏è Violations Totales: ${{ steps.synthesize.outputs.total_violations }}"
        echo "üö® Violations Critiques: ${{ steps.synthesize.outputs.critical_violations }}"
        echo "üí° Recommandation: ${{ steps.synthesize.outputs.recommendation }}"

        if [[ "${{ steps.synthesize.outputs.audit_status }}" == "FAILED" ]]; then
          echo "::error::Audit AGI √âCHOU√â - Violations critiques d√©tect√©es"
          exit 1
        elif [[ "${{ steps.synthesize.outputs.audit_status }}" == "WARNING" ]]; then
          echo "::warning::Audit AGI avec AVERTISSEMENTS"
        else
          echo "::notice::Audit AGI R√âUSSI ‚úÖ"
        fi
