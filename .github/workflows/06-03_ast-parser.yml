name: "Travailleur : Parser AST Python"

on:
  workflow_call:
    inputs:
      contenu_fichier_python:
        description: "Contenu Python √† analyser ou chemin vers fichier .py"
        required: true
        type: string
      niveau_detail:
        description: "Niveau de d√©tail de l'analyse AST (basic/complet)"
        required: false
        default: "complet"
        type: string
      nom_artefact:
        description: "Nom de l'artefact JSON de sortie"
        required: false
        default: "arbre-syntaxe.json"
        type: string
    outputs:
      elements_detectes:
        description: "Nombre total d'√©l√©ments AST d√©tect√©s"
        value: ${{ jobs.parse_ast.outputs.element_count }}
      parsing_success:
        description: "Succ√®s du parsing AST (true/false)"
        value: ${{ jobs.parse_ast.outputs.success }}
      artefact_path:
        description: "Chemin vers l'artefact AST g√©n√©r√©"
        value: ${{ jobs.parse_ast.outputs.artifact_path }}

jobs:
  parse_ast:
    name: "Analyse AST Python"
    runs-on: ubuntu-latest
    outputs:
      element_count: ${{ steps.ast.outputs.element_count }}
      success: ${{ steps.ast.outputs.success }}
      artifact_path: ${{ steps.ast.outputs.artifact_path }}
    
    steps:
      - name: "Checkout du code"
        uses: actions/checkout@v4
      
      - name: "Configuration Python 3.11"
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: "Installation des d√©pendances Python"
        run: |
          python -m pip install --upgrade pip
          # Utilise seulement la stdlib Python (module ast)
      
      - name: "Validation du niveau de d√©tail"
        run: |
          if [ "${{ inputs.niveau_detail }}" != "basic" ] && [ "${{ inputs.niveau_detail }}" != "complet" ]; then
            echo "‚ùå ERREUR: Niveau de d√©tail invalide : ${{ inputs.niveau_detail }}"
            echo "Valeurs autoris√©es: basic, complet"
            exit 1
          fi
          echo "‚úÖ Niveau de d√©tail valid√© : ${{ inputs.niveau_detail }}"
      
      - name: "Pr√©paration du code Python d'entr√©e"
        id: prepare_code
        run: |
          # V√©rifier si c'est un fichier Python existant
          if [ -f "${{ inputs.contenu_fichier_python }}" ] && [[ "${{ inputs.contenu_fichier_python }}" == *.py ]]; then
            echo "üêç Fichier Python d√©tect√© : ${{ inputs.contenu_fichier_python }}"
            echo "üìä Taille : $(stat -c%s "${{ inputs.contenu_fichier_python }}") octets"
            echo "üìã Lignes : $(wc -l < "${{ inputs.contenu_fichier_python }}")"
            echo "content_type=file" >> $GITHUB_OUTPUT
          else
            echo "üìù Code Python direct ($(echo '${{ inputs.contenu_fichier_python }}' | wc -c) caract√®res)"
            echo "content_type=inline" >> $GITHUB_OUTPUT
          fi
      
      - name: "Validation syntaxe Python pr√©liminaire"
        run: |
          echo "üîç Pr√©-validation de la syntaxe Python :"
          python -c "import ast; import sys; try:; # Test rapide de parsing; contenu = '''${{ inputs.contenu_fichier_python }}'''; if '${{ steps.prepare_code.outputs.content_type }}' == 'file':; with open('${{ inputs.contenu_fichier_python }}', 'r') as f:; contenu = f.read(); ; if contenu.strip():; ast.parse(contenu); print('‚úÖ Syntaxe Python valide'); else:; print('‚ö†Ô∏è  Code vide - parsing possible mais aucun √©l√©ment'); except SyntaxError as e:; print(f'‚ö†Ô∏è  Erreur syntaxe d√©tect√©e (sera trait√©e par le parser): {e}'); except Exception as e:; print(f'‚ö†Ô∏è  Autre erreur (sera trait√©e par le parser): {e}')"
      - name: "Ex√©cution du parser AST"
        id: ast
        run: |
          python .github/scripts/travailleur_ast_parser.py \
            --contenu-fichier-python "${{ inputs.contenu_fichier_python }}" \
            --niveau-detail "${{ inputs.niveau_detail }}" \
            --sortie "${{ inputs.nom_artefact }}"
          
          # Extraction des statistiques pour les outputs
          if [ -f "${{ inputs.nom_artefact }}" ]; then
            # V√©rifier si le parsing a r√©ussi
            has_error=$(python -c "import json; try: f = open('${{ inputs.nom_artefact }}', 'r'); data = json.load(f); f.close(); print('true' if 'erreur' in data else 'false'); except: print('true')")
            
            if [ "$has_error" = "true" ]; then
              echo "success=false" >> $GITHUB_OUTPUT
              echo "element_count=0" >> $GITHUB_OUTPUT
              echo "‚ö†Ô∏è  Parsing AST √©chou√© (erreur de syntaxe)"
            else
              count=$(python -c "import json; try: f = open('${{ inputs.nom_artefact }}', 'r'); data = json.load(f); f.close(); print(data.get('elements_ast', {}).get('total', 0)); except: print(0)")
              echo "success=true" >> $GITHUB_OUTPUT
              echo "element_count=$count" >> $GITHUB_OUTPUT
              echo "üéØ $count √©l√©ments AST d√©tect√©s"
            fi
            
            echo "artifact_path=${{ inputs.nom_artefact }}" >> $GITHUB_OUTPUT
          else
            echo "success=false" >> $GITHUB_OUTPUT
            echo "element_count=0" >> $GITHUB_OUTPUT
            echo "‚ùå ERREUR: Artefact AST non cr√©√©"
            exit 1
          fi
      
      - name: "Upload de l'artefact AST"
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.nom_artefact }}
          path: ${{ inputs.nom_artefact }}
          retention-days: 30
      
      - name: "Rapport d'analyse AST et validation"
        run: |
          if [ -f "${{ inputs.nom_artefact }}" ]; then
            echo "üìÑ Artefact AST cr√©√© : ${{ inputs.nom_artefact }}"
            echo "üìä Taille : $(stat -c%s "${{ inputs.nom_artefact }}") octets"
            
            # Affichage d'un r√©sum√© de l'analyse AST
            echo "üêç R√©sum√© de l'analyse AST Python :"
            python -c "import json; try:; with open('${{ inputs.nom_artefact }}', 'r') as f:; data = json.load(f); ; if 'erreur' in data:; print(f'   ‚ùå Erreur: {data[\\"erreur\\"]}'); return; ; stats = data['code_stats']; elements = data['elements_ast']; ; print(f'   ‚Ä¢ Niveau d√©tail : {data[\\"niveau_detail\\"]}'); print(f'   ‚Ä¢ Code analys√© : {stats[\\"taille_caracteres\\"]} caract√®res, {stats[\\"lignes\\"]} lignes'); print(f'   ‚Ä¢ Lignes non vides : {stats[\\"lignes_non_vides\\"]}'); print(f'   ‚Ä¢ Total √©l√©ments AST : {elements[\\"total\\"]}'); ; if elements['total'] > 0:; print('   ‚Ä¢ R√©partition des √©l√©ments :'); for type_elem, count in elements.items():; if type_elem != 'total' and count > 0:; print(f'     - {type_elem}: {count}'); ; structure = data['structure']; if structure and 'elements' in structure:; print(f'   ‚Ä¢ √âl√©ments de premier niveau : {len(structure[\\"elements\\"])}'); if structure['elements']:; print('   ‚Ä¢ √âchantillon :'); for elem in structure['elements'][:3]:; print(f'     - {elem[\\"type\\"]}: {elem.get(\\"nom\\", \\"N/A\\")} (ligne {elem.get(\\"ligne\\", \\"N/A\\")})'); if len(structure['elements']) > 3:; print(f'     ... et {len(structure[\\"elements\\"]) - 3} autres'); ; except Exception as e:; print(f'‚ùå Erreur lecture r√©sultats AST : {e}')"
          else
            echo "‚ùå ERREUR: Fichier de r√©sultats AST non trouv√©"
            exit 1
          fi
          
          if [ "${{ steps.ast.outputs.success }}" = "true" ]; then
            echo "‚úÖ Analyse AST termin√©e avec succ√®s"
          else
            echo "‚ö†Ô∏è  Analyse AST termin√©e avec des erreurs"
          fi
      
      - name: "Debug - Structure d√©taill√©e AST"
        if: runner.debug == '1'
        run: |
          echo "üîç Structure compl√®te de l'AST :"
          python -c "import json; try:; with open('${{ inputs.nom_artefact }}', 'r') as f:; data = json.load(f); print(json.dumps(data, indent=2, ensure_ascii=False)); except Exception as e:; print(f'Erreur affichage debug : {e}')"