name: "Nettoyeur : Formateur Statut"

on:
  workflow_call:
    inputs:
      resultat:
        description: "R√©sultat du check (true pour succ√®s, false pour √©chec)"
        required: true
        type: boolean
      message_succes:
        description: "Message √† afficher en cas de succ√®s"
        required: true
        type: string
      message_echec:
        description: "Message √† afficher en cas d'√©chec"
        required: true
        type: string
      nom_check:
        description: "Nom du check √† cr√©er (ex: 'AGI-Gouvernance/Audit-Lignes')"
        required: true
        type: string
    outputs:
      check_result:
        description: "R√©sultat du check post√© (success/failure)"
        value: ${{ jobs.format_statut.outputs.result }}
      check_url:
        description: "URL du check cr√©√© (si disponible)"
        value: ${{ jobs.format_statut.outputs.url }}

# Permissions n√©cessaires pour cr√©er des checks et statuts
permissions:
  checks: write
  statuses: write
  contents: read

jobs:
  format_statut:
    name: "Cr√©ation check de statut GitHub"
    runs-on: ubuntu-latest
    outputs:
      result: ${{ steps.format.outputs.check_result }}
      url: ${{ steps.format.outputs.check_url }}
    
    steps:
      - name: "Checkout du code"
        uses: actions/checkout@v4
      
      - name: "Configuration Python 3.11"
        uses: actions/setup-python@v6
        with:
          python-version: '3.11'
      
      - name: "Installation des d√©pendances Python"
        run: |
          python -m pip install --upgrade pip
          pip install requests
      
      - name: "Configuration GitHub CLI (fallback)"
        run: |
          # GitHub CLI est d√©j√† install√© sur ubuntu-latest
          gh --version
          echo "üîß GitHub CLI configur√©"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: "Ex√©cution du formateur de statut"
        id: format
        run: |
          python .github/scripts/nettoyeur_format_statut.py \
            --resultat "${{ inputs.resultat }}" \
            --message-succes "${{ inputs.message_succes }}" \
            --message-echec "${{ inputs.message_echec }}" \
            --nom-check "${{ inputs.nom_check }}"
          
          # Capture des outputs du script pour les transmettre
          if [ "${{ inputs.resultat }}" = "true" ]; then
            echo "check_result=success" >> $GITHUB_OUTPUT
            echo "‚úÖ Check de statut cr√©√© avec succ√®s"
          else
            echo "check_result=failure" >> $GITHUB_OUTPUT
            echo "‚ùå Check de statut cr√©√© (√©chec signal√©)"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_SHA: ${{ github.sha }}
      
      - name: "Validation de la cr√©ation du statut"
        run: |
          echo "üìä R√©capitulatif du check de statut :"
          echo "   ‚Ä¢ Nom du check : ${{ inputs.nom_check }}"
          echo "   ‚Ä¢ R√©sultat : ${{ inputs.resultat }}"
          if [ "${{ inputs.resultat }}" = "true" ]; then
            echo "   ‚Ä¢ Message : ${{ inputs.message_succes }}"
            echo "   ‚Ä¢ Statut final : ‚úÖ SUCC√àS"
          else
            echo "   ‚Ä¢ Message : ${{ inputs.message_echec }}"
            echo "   ‚Ä¢ Statut final : ‚ùå √âCHEC"
          fi
          echo "   ‚Ä¢ Commit SHA : ${{ github.sha }}"
          echo "   ‚Ä¢ Repository : ${{ github.repository }}"
          
          echo "üéØ Check de statut trait√© avec succ√®s"
      
      - name: "Debug - Informations environnement"
        if: runner.debug == '1'
        run: |
          echo "üîç Variables d'environnement GitHub Actions :"
          echo "GITHUB_REPOSITORY=${{ github.repository }}"
          echo "GITHUB_SHA=${{ github.sha }}"
          echo "GITHUB_REF=${{ github.ref }}"
          echo "GITHUB_EVENT_NAME=${{ github.event_name }}"
          echo "GITHUB_ACTOR=${{ github.actor }}"
