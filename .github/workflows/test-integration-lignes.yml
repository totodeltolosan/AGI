name: "Test d'Int√©gration : Division Loi Lignes"

# Test de bout-en-bout de la cha√Æne de production compl√®te
on:
  workflow_dispatch:
    inputs:
      limite_lignes_test:
        description: "Limite de lignes pour le test (d√©faut: 200)"
        required: false
        default: "200"
        type: string
      fichiers_a_analyser:
        description: "Pattern de fichiers √† analyser pour le test"
        required: false
        default: "*.py"
        type: string
      mode_debug:
        description: "Activer le mode debug d√©taill√©"
        required: false
        default: false
        type: boolean

# Permissions n√©cessaires
permissions:
  contents: read
  issues: write
  checks: write

jobs:
  # ============================================================================
  # √âTAPE 0 : Pr√©paration des donn√©es de test
  # ============================================================================
  
  preparation_donnees:
    name: "Pr√©paration des donn√©es de test"
    runs-on: ubuntu-latest
    outputs:
      artefact_liste_fichiers: ${{ steps.scan.outputs.artefact_path }}
      total_fichiers_detectes: ${{ steps.scan.outputs.fichiers_trouves }}
    
    steps:
      - name: "Checkout du code avec historique"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: "Scan initial des fichiers √† analyser"
        id: scan
        uses: ./.github/workflows/06-01_scanner-fichiers.yml
        with:
          pattern: ${{ inputs.fichiers_a_analyser }}
          chemin_racine: "./"
          exclusions: '["test_*", "*__pycache__*", "*.pyc", ".git/*"]'
          nom_artefact: "liste-fichiers-test-lignes.json"
      
      - name: "Validation de la pr√©paration"
        run: |
          echo "üîç Donn√©es de test pr√©par√©es"
          echo "   ‚Ä¢ Pattern analys√© : ${{ inputs.fichiers_a_analyser }}"
          echo "   ‚Ä¢ Fichiers d√©tect√©s : ${{ steps.scan.outputs.fichiers_trouves }}"
          echo "   ‚Ä¢ Artefact : ${{ steps.scan.outputs.artefact_path }}"
          
          if [ "${{ steps.scan.outputs.fichiers_trouves }}" = "0" ]; then
            echo "‚ö†Ô∏è  Aucun fichier d√©tect√© - le test continuera avec des donn√©es vides"
          fi

  # ============================================================================
  # √âTAPE 1 : Compteur de Lignes + Validation
  # ============================================================================
  
  etape_compteur:
    name: "1Ô∏è‚É£ Compteur + Validation"
    runs-on: ubuntu-latest
    needs: preparation_donnees
    outputs:
      artefact_resultats_bruts: ${{ steps.compteur.outputs.artefact_resultats }}
      fichiers_analyses: ${{ steps.compteur.outputs.total_fichiers_analyses }}
      total_lignes: ${{ steps.compteur.outputs.total_lignes }}
      validation_compteur_ok: ${{ steps.compteur.outputs.validation_reussie }}
    
    steps:
      - name: "Checkout du code"
        uses: actions/checkout@v4
      
      - name: "Ex√©cution Ouvrier Compteur"
        id: compteur
        uses: ./.github/workflows/04-01-lignes-compteur.yml
        with:
          artefact_liste_fichiers: ${{ needs.preparation_donnees.outputs.artefact_liste_fichiers }}
          inclure_vides: true
          inclure_commentaires: true
          nom_artefact_sortie: "resultats-bruts-compteur-test.json"
      
      - name: "Rapport √âtape 1"
        run: |
          echo "‚úÖ √âTAPE 1 TERMIN√âE - Compteur de Lignes"
          echo "   ‚Ä¢ Fichiers analys√©s : ${{ steps.compteur.outputs.total_fichiers_analyses }}"
          echo "   ‚Ä¢ Total lignes : ${{ steps.compteur.outputs.total_lignes }}"
          echo "   ‚Ä¢ Validation : $([ '${{ steps.compteur.outputs.validation_reussie }}' = 'true' ] && echo 'R√âUSSIE' || echo '√âCHOU√âE')"
          
          if [ "${{ steps.compteur.outputs.validation_reussie }}" != "true" ]; then
            echo "‚ùå ARR√äT: Validation du compteur √©chou√©e"
            exit 1
          fi

  # ============================================================================
  # √âTAPE 2 : Juge de Conformit√© + Validation
  # ============================================================================
  
  etape_juge:
    name: "2Ô∏è‚É£ Juge + Validation"
    runs-on: ubuntu-latest
    needs: etape_compteur
    outputs:
      artefact_resultats_juges: ${{ steps.juge.outputs.artefact_resultats }}
      taux_conformite: ${{ steps.juge.outputs.taux_conformite }}
      verdict_global: ${{ steps.juge.outputs.verdict_global }}
      validation_juge_ok: ${{ steps.juge.outputs.validation_reussie }}
    
    steps:
      - name: "Checkout du code"
        uses: actions/checkout@v4
      
      - name: "Ex√©cution Ouvrier Juge"
        id: juge
        uses: ./.github/workflows/04-02-lignes-juge.yml
        with:
          artefact_resultats_bruts: ${{ needs.etape_compteur.outputs.artefact_resultats_bruts }}
          limite_lignes: ${{ inputs.limite_lignes_test }}
          nom_artefact_sortie: "resultats-juges-test.json"
      
      - name: "Rapport √âtape 2"
        run: |
          echo "‚úÖ √âTAPE 2 TERMIN√âE - Juge de Conformit√©"
          echo "   ‚Ä¢ Limite appliqu√©e : ${{ inputs.limite_lignes_test }} lignes"
          echo "   ‚Ä¢ Taux conformit√© : ${{ steps.juge.outputs.taux_conformite }}%"
          echo "   ‚Ä¢ Verdict : ${{ steps.juge.outputs.verdict_global }}"
          echo "   ‚Ä¢ Validation : $([ '${{ steps.juge.outputs.validation_reussie }}' = 'true' ] && echo 'R√âUSSIE' || echo '√âCHOU√âE')"
          
          if [ "${{ steps.juge.outputs.validation_reussie }}" != "true" ]; then
            echo "‚ùå ARR√äT: Validation du juge √©chou√©e"
            exit 1
          fi

  # ============================================================================
  # √âTAPE 3 : Statisticien + Validation
  # ============================================================================
  
  etape_statisticien:
    name: "3Ô∏è‚É£ Statisticien + Validation"
    runs-on: ubuntu-latest
    needs: etape_juge
    outputs:
      artefact_statistiques: ${{ steps.stats.outputs.artefact_resultats }}
      moyenne_lignes: ${{ steps.stats.outputs.moyenne_lignes }}
      validation_stats_ok: ${{ steps.stats.outputs.validation_reussie }}
    
    steps:
      - name: "Checkout du code"
        uses: actions/checkout@v4
      
      - name: "Ex√©cution Ouvrier Statisticien"
        id: stats
        uses: ./.github/workflows/04-03-lignes-statisticien.yml
        with:
          artefact_resultats_juges: ${{ needs.etape_juge.outputs.artefact_resultats_juges }}
          inclure_percentiles: true
          nom_artefact_sortie: "statistiques-test.json"
      
      - name: "Rapport √âtape 3"
        run: |
          echo "‚úÖ √âTAPE 3 TERMIN√âE - Statisticien"
          echo "   ‚Ä¢ Moyenne lignes/fichier : ${{ steps.stats.outputs.moyenne_lignes }}"
          echo "   ‚Ä¢ Taux conformit√© calcul√© : ${{ steps.stats.outputs.taux_conformite }}%"
          echo "   ‚Ä¢ Validation : $([ '${{ steps.stats.outputs.validation_reussie }}' = 'true' ] && echo 'R√âUSSIE' || echo '√âCHOU√âE')"
          
          if [ "${{ steps.stats.outputs.validation_reussie }}" != "true" ]; then
            echo "‚ùå ARR√äT: Validation du statisticien √©chou√©e"
            exit 1
          fi

  # ============================================================================
  # √âTAPE 4 : Rapporteur + Validation
  # ============================================================================
  
  etape_rapporteur:
    name: "4Ô∏è‚É£ Rapporteur + Validation"
    runs-on: ubuntu-latest
    needs: [etape_juge, etape_statisticien]
    outputs:
      artefact_rapport: ${{ steps.rapport.outputs.artefact_resultats }}
      total_lignes_rapport: ${{ steps.rapport.outputs.total_lignes_rapport }}
      validation_rapport_ok: ${{ steps.rapport.outputs.validation_reussie }}
    
    steps:
      - name: "Checkout du code"
        uses: actions/checkout@v4
      
      - name: "Ex√©cution Ouvrier Rapporteur"
        id: rapport
        uses: ./.github/workflows/04-04-lignes-rapporteur.yml
        with:
          artefact_resultats_juges: ${{ needs.etape_juge.outputs.artefact_resultats_juges }}
          artefact_statistiques: ${{ needs.etape_statisticien.outputs.artefact_statistiques }}
          format_detaille: true
          nom_artefact_sortie: "rapport-lignes-test.csv"
      
      - name: "Rapport √âtape 4"
        run: |
          echo "‚úÖ √âTAPE 4 TERMIN√âE - Rapporteur"
          echo "   ‚Ä¢ Lignes dans le rapport : ${{ steps.rapport.outputs.total_lignes_rapport }}"
          echo "   ‚Ä¢ Taux conformit√© rapport : ${{ steps.rapport.outputs.taux_conformite_rapport }}%"
          echo "   ‚Ä¢ Validation : $([ '${{ steps.rapport.outputs.validation_reussie }}' = 'true' ] && echo 'R√âUSSIE' || echo '√âCHOU√âE')"
          
          if [ "${{ steps.rapport.outputs.validation_reussie }}" != "true" ]; then
            echo "‚ùå ARR√äT: Validation du rapporteur √©chou√©e"
            exit 1
          fi

  # ============================================================================
  # √âTAPE 5 : Conseiller + Validation
  # ============================================================================
  
  etape_conseiller:
    name: "5Ô∏è‚É£ Conseiller + Validation"
    runs-on: ubuntu-latest
    needs: etape_statisticien
    outputs:
      artefact_recommandations: ${{ steps.conseils.outputs.artefact_resultats }}
      taille_document: ${{ steps.conseils.outputs.taille_document }}
      validation_conseils_ok: ${{ steps.conseils.outputs.validation_reussie }}
    
    steps:
      - name: "Checkout du code"
        uses: actions/checkout@v4
      
      - name: "Ex√©cution Ouvrier Conseiller"
        id: conseils
        uses: ./.github/workflows/04-05-lignes-conseiller.yml
        with:
          artefact_statistiques: ${{ needs.etape_statisticien.outputs.artefact_statistiques }}
          niveau_detail: "expert"
          inclure_exemples: true
          nom_artefact_sortie: "recommandations-test.md"
      
      - name: "Rapport √âtape 5"
        run: |
          echo "‚úÖ √âTAPE 5 TERMIN√âE - Conseiller"
          echo "   ‚Ä¢ Taille document : ${{ steps.conseils.outputs.taille_document }} caract√®res"
          echo "   ‚Ä¢ Validation : $([ '${{ steps.conseils.outputs.validation_reussie }}' = 'true' ] && echo 'R√âUSSIE' || echo '√âCHOU√âE')"
          
          if [ "${{ steps.conseils.outputs.validation_reussie }}" != "true" ]; then
            echo "‚ùå ARR√äT: Validation du conseiller √©chou√©e"
            exit 1
          fi

  # ============================================================================
  # RAPPORT FINAL D'INT√âGRATION
  # ============================================================================
  
  rapport_integration_final:
    name: "üìä Rapport Final d'Int√©gration"
    runs-on: ubuntu-latest
    needs: [preparation_donnees, etape_compteur, etape_juge, etape_statisticien, etape_rapporteur, etape_conseiller]
    if: always()
    
    steps:
      - name: "Checkout du code"
        uses: actions/checkout@v4
      
      - name: "Analyse des r√©sultats de la cha√Æne compl√®te"
        run: |
          echo "üîó ANALYSE DE LA CHA√éNE DE PRODUCTION COMPL√àTE"
          echo "=============================================="
          
          # V√©rification du statut de chaque √©tape
          etapes=(
            "preparation_donnees:${{ needs.preparation_donnees.result }}"
            "etape_compteur:${{ needs.etape_compteur.result }}"
            "etape_juge:${{ needs.etape_juge.result }}"
            "etape_statisticien:${{ needs.etape_statisticien.result }}"
            "etape_rapporteur:${{ needs.etape_rapporteur.result }}"
            "etape_conseiller:${{ needs.etape_conseiller.result }}"
          )
          
          echo ""
          echo "üìã STATUT DE CHAQUE √âTAPE :"
          success_count=0
          total_etapes=6
          
          for etape in "${etapes[@]}"; do
            name="${etape%%:*}"
            status="${etape##*:}"
            case "$status" in
              "success")
                echo "   ‚úÖ $name : R√âUSSI"
                ((success_count++))
                ;;
              "failure")
                echo "   ‚ùå $name : √âCHOU√â"
                ;;
              "cancelled"|"skipped")
                echo "   ‚è≠Ô∏è  $name : IGNOR√â"
                ;;
              *)
                echo "   ‚ùì $name : STATUT INCONNU ($status)"
                ;;
            esac
          done
          
          echo ""
          echo "üìä M√âTRIQUES DE LA CHA√éNE :"
          echo "   ‚Ä¢ √âtapes r√©ussies : $success_count/$total_etapes"
          echo "   ‚Ä¢ Fichiers d√©tect√©s : ${{ needs.preparation_donnees.outputs.total_fichiers_detectes }}"
          echo "   ‚Ä¢ Fichiers analys√©s : ${{ needs.etape_compteur.outputs.fichiers_analyses }}"
          echo "   ‚Ä¢ Total lignes : ${{ needs.etape_compteur.outputs.total_lignes }}"
          echo "   ‚Ä¢ Limite appliqu√©e : ${{ inputs.limite_lignes_test }} lignes"
          echo "   ‚Ä¢ Taux conformit√© : ${{ needs.etape_juge.outputs.taux_conformite }}%"
          echo "   ‚Ä¢ Verdict global : ${{ needs.etape_juge.outputs.verdict_global }}"
          echo "   ‚Ä¢ Moyenne lignes/fichier : ${{ needs.etape_statisticien.outputs.moyenne_lignes }}"
          
          echo ""
          echo "üìÑ ARTEFACTS G√âN√âR√âS :"
          artefacts=(
            "Liste fichiers:${{ needs.preparation_donnees.outputs.artefact_liste_fichiers }}"
            "R√©sultats bruts:${{ needs.etape_compteur.outputs.artefact_resultats_bruts }}"
            "Jugements:${{ needs.etape_juge.outputs.artefact_resultats_juges }}"
            "Statistiques:${{ needs.etape_statisticien.outputs.artefact_statistiques }}"
            "Rapport CSV:${{ needs.etape_rapporteur.outputs.artefact_rapport }}"
            "Recommandations:${{ needs.etape_conseiller.outputs.artefact_recommandations }}"
          )
          
          for artefact in "${artefacts[@]}"; do
            name="${artefact%%:*}"
            file="${artefact##*:}"
            echo "   üìé $name : $file"
          done
          
          echo ""
          echo "üîç VALIDATIONS PAR QUALITICIENS :"
          validations=(
            "Compteur:${{ needs.etape_compteur.outputs.validation_compteur_ok }}"
            "Juge:${{ needs.etape_juge.outputs.validation_juge_ok }}"
            "Statisticien:${{ needs.etape_statisticien.outputs.validation_stats_ok }}"
            "Rapporteur:${{ needs.etape_rapporteur.outputs.validation_rapport_ok }}"
            "Conseiller:${{ needs.etape_conseiller.outputs.validation_conseils_ok }}"
          )
          
          validations_ok=0
          for validation in "${validations[@]}"; do
            name="${validation%%:*}"
            status="${validation##*:}"
            if [ "$status" = "true" ]; then
              echo "   ‚úÖ $name : VALID√â"
              ((validations_ok++))
            else
              echo "   ‚ùå $name : VALIDATION √âCHOU√âE"
            fi
          done
          
          echo ""
          echo "üìà R√âSUM√â GLOBAL :"
          success_rate=$((success_count * 100 / total_etapes))
          validation_rate=$((validations_ok * 100 / 5))  # 5 validations attendues
          
          echo "   ‚Ä¢ Taux succ√®s √©tapes : ${success_rate}%"
          echo "   ‚Ä¢ Taux succ√®s validations : ${validation_rate}%"
          
          if [ $success_count -eq $total_etapes ] && [ $validations_ok -eq 5 ]; then
            echo ""
            echo "üèÜ INT√âGRATION COMPL√àTEMENT R√âUSSIE !"
            echo "‚úÖ La cha√Æne de production Division 'Loi Lignes' fonctionne parfaitement"
            echo "üöÄ Pr√™t pour l'int√©gration avec le Contrema√Ætre (Niveau 3)"
          elif [ $success_count -ge 4 ] && [ $validations_ok -ge 3 ]; then
            echo ""
            echo "üëç INT√âGRATION LARGEMENT R√âUSSIE"
            echo "‚ö†Ô∏è  Quelques probl√®mes mineurs √† corriger"
          else
            echo ""
            echo "üö® INT√âGRATION PARTIELLEMENT √âCHOU√âE"
            echo "üîß Corrections n√©cessaires avant passage au Contrema√Ætre"
          fi

      - name: "Cr√©ation du check de statut final"
        uses: ./.github/workflows/07-03_formateur-statut.yml
        with:
          resultat: ${{ needs.preparation_donnees.result == 'success' && needs.etape_compteur.result == 'success' && needs.etape_juge.result == 'success' && needs.etape_statisticien.result == 'success' && needs.etape_rapporteur.result == 'success' && needs.etape_conseiller.result == 'success' }}
          message_succes: "‚úÖ Test d'int√©gration Division Loi Lignes : CHA√éNE COMPL√àTE R√âUSSIE"
          message_echec: "‚ùå Test d'int√©gration Division Loi Lignes : √âCHECS DANS LA CHA√éNE"
          nom_check: "AGI-Gouvernance/Integration-Loi-Lignes"

      - name: "R√©sum√© dans l'interface GitHub Actions"
        if: always()
        run: |
          echo "## üîó Test d'Int√©gration - Division Loi Lignes" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Pattern analys√© :** \`${{ inputs.fichiers_a_analyser }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Limite de test :** ${{ inputs.limite_lignes_test }} lignes/fichier" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Statut global
          if [ "${{ needs.preparation_donnees.result }}" = "success" ] && \
             [ "${{ needs.etape_compteur.result }}" = "success" ] && \
             [ "${{ needs.etape_juge.result }}" = "success" ] && \
             [ "${{ needs.etape_statisticien.result }}" = "success" ] && \
             [ "${{ needs.etape_rapporteur.result }}" = "success" ] && \
             [ "${{ needs.etape_conseiller.result }}" = "success" ]; then
            echo "**üèÜ R√âSULTAT GLOBAL : SUCC√àS COMPLET**" >> $GITHUB_STEP_SUMMARY
          else
            echo "**üö® R√âSULTAT GLOBAL : √âCHECS D√âTECT√âS**" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### M√©triques de la cha√Æne" >> $GITHUB_STEP_SUMMARY
          echo "- **Fichiers analys√©s :** ${{ needs.etape_compteur.outputs.fichiers_analyses }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Total lignes :** ${{ needs.etape_compteur.outputs.total_lignes }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Taux conformit√© :** ${{ needs.etape_juge.outputs.taux_conformite }}%" >> $GITHUB_STEP_SUMMARY
          echo "- **Verdict :** ${{ needs.etape_juge.outputs.verdict_global }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "*Test d'int√©gration termin√© le $(date '+%Y-%m-%d %H:%M:%S')*" >> $GITHUB_STEP_SUMMARY

  # ============================================================================
  # DEBUG (si activ√©)
  # ============================================================================
  
  debug_integration:
    name: "üîç Debug Int√©gration"
    runs-on: ubuntu-latest
    needs: [preparation_donnees, etape_compteur, etape_juge, etape_statisticien, etape_rapporteur, etape_conseiller]
    if: inputs.mode_debug && always()
    
    steps:
      - name: "Informations debug d√©taill√©es"
        run: |
          echo "üîç DEBUG - INFORMATIONS D√âTAILL√âES D'INT√âGRATION"
          echo "=============================================="
          echo ""
          echo "Variables d'entr√©e :"
          echo "  ‚Ä¢ limite_lignes_test: ${{ inputs.limite_lignes_test }}"
          echo "  ‚Ä¢ fichiers_a_analyser: ${{ inputs.fichiers_a_analyser }}"
          echo "  ‚Ä¢ mode_debug: ${{ inputs.mode_debug }}"
          echo ""
          echo "Statuts des jobs :"
          echo "  ‚Ä¢ preparation_donnees: ${{ needs.preparation_donnees.result }}"
          echo "  ‚Ä¢ etape_compteur: ${{ needs.etape_compteur.result }}"
          echo "  ‚Ä¢ etape_juge: ${{ needs.etape_juge.result }}"
          echo "  ‚Ä¢ etape_statisticien: ${{ needs.etape_statisticien.result }}"
          echo "  ‚Ä¢ etape_rapporteur: ${{ needs.etape_rapporteur.result }}"
          echo "  ‚Ä¢ etape_conseiller: ${{ needs.etape_conseiller.result }}"
          echo ""
          echo "Outputs de chaque √©tape :"
          echo "  ‚Ä¢ Fichiers d√©tect√©s: ${{ needs.preparation_donnees.outputs.total_fichiers_detectes }}"
          echo "  ‚Ä¢ Artefact liste: ${{ needs.preparation_donnees.outputs.artefact_liste_fichiers }}"
          echo "  ‚Ä¢ Fichiers analys√©s: ${{ needs.etape_compteur.outputs.fichiers_analyses }}"
          echo "  ‚Ä¢ Total lignes: ${{ needs.etape_compteur.outputs.total_lignes }}"
          echo "  ‚Ä¢ Taux conformit√©: ${{ needs.etape_juge.outputs.taux_conformite }}"
          echo "  ‚Ä¢ Verdict: ${{ needs.etape_juge.outputs.verdict_global }}"
          echo "  ‚Ä¢ Moyenne lignes: ${{ needs.etape_statisticien.outputs.moyenne_lignes }}"
