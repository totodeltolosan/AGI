name: "üö® Ma√Ætre - Contr√¥le Humain d'Urgence"

on:
  workflow_dispatch:
    inputs:
      pull_request_number:
        description: "Num√©ro de la Pull Request √† approuver en urgence"
        required: true
        type: string
      raison:
        description: "Raison d√©taill√©e de ce contournement d'urgence"
        required: true
        type: string
      loi_a_ignorer:
        description: "Quelle validation ignorer ?"
        required: true
        type: choice
        options:
          - "Toutes - Approbation d'urgence compl√®te"
          - "S√©curit√© - Violations de s√©curit√© accept√©es"
          - "Documentation - Couverture insuffisante accept√©e"
          - "Lignes - Limite de lignes d√©pass√©e accept√©e" 
          - "Issues - Cr√©ation d'issues ignor√©e"
          - "Sauvegarde - Archivage des rapports ignor√©"
          - "PlantUML - Mise √† jour diagramme ignor√©e"
      force_merge:
        description: "Forcer le merge apr√®s approbation ?"
        required: false
        type: boolean
        default: false

env:
  # Variables pour tra√ßabilit√© maximale
  EMERGENCY_TIMESTAMP: ${{ github.run_id }}-${{ github.run_number }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  controle_humain_urgence:
    name: "üö® Intervention Humaine d'Urgence"
    runs-on: ubuntu-latest
    
    steps:
      - name: "Checkout pour acc√®s GitHub CLI"
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: "Validation des param√®tres d'entr√©e"
        run: |
          echo "üîç Validation des param√®tres d'urgence..."
          
          # Validation du num√©ro de PR
          if [ -z "${{ inputs.pull_request_number }}" ]; then
            echo "‚ùå ERREUR: Num√©ro de Pull Request requis"
            exit 1
          fi
          
          # Validation de la raison
          if [ ${#INPUT_RAISON} -lt 20 ]; then
            echo "‚ùå ERREUR: Raison trop courte (minimum 20 caract√®res)"
            echo "   Raison actuelle: '${{ inputs.raison }}'"
            exit 1
          fi
          
          echo "‚úÖ Param√®tres valid√©s :"
          echo "   ‚Ä¢ Pull Request: #${{ inputs.pull_request_number }}"
          echo "   ‚Ä¢ Loi ignor√©e: ${{ inputs.loi_a_ignorer }}"
          echo "   ‚Ä¢ Force merge: ${{ inputs.force_merge }}"
          echo "   ‚Ä¢ Longueur raison: ${#INPUT_RAISON} caract√®res"
        env:
          INPUT_RAISON: ${{ inputs.raison }}
      
      - name: "V√©rification de l'existence de la Pull Request"
        id: check_pr
        run: |
          echo "üîç V√©rification de l'existence de PR #${{ inputs.pull_request_number }}..."
          
          # R√©cup√©rer les informations de la PR
          if gh pr view "${{ inputs.pull_request_number }}" --json title,state,author,url > pr_info.json; then
            echo "‚úÖ Pull Request trouv√©e"
            
            # Extraire les informations
            PR_TITLE=$(jq -r '.title' pr_info.json)
            PR_STATE=$(jq -r '.state' pr_info.json) 
            PR_AUTHOR=$(jq -r '.author.login' pr_info.json)
            PR_URL=$(jq -r '.url' pr_info.json)
            
            echo "pr_title=$PR_TITLE" >> $GITHUB_OUTPUT
            echo "pr_state=$PR_STATE" >> $GITHUB_OUTPUT
            echo "pr_author=$PR_AUTHOR" >> $GITHUB_OUTPUT
            echo "pr_url=$PR_URL" >> $GITHUB_OUTPUT
            
            echo "   ‚Ä¢ Titre: $PR_TITLE"
            echo "   ‚Ä¢ √âtat: $PR_STATE"
            echo "   ‚Ä¢ Auteur: $PR_AUTHOR"
            echo "   ‚Ä¢ URL: $PR_URL"
            
            if [ "$PR_STATE" != "OPEN" ]; then
              echo "‚ö†Ô∏è ATTENTION: PR dans l'√©tat '$PR_STATE' (pas OPEN)"
            fi
          else
            echo "‚ùå ERREUR: Pull Request #${{ inputs.pull_request_number }} introuvable"
            exit 1
          fi
      
      - name: "üö® APPLICATION DU CONTOURNEMENT D'URGENCE"
        id: emergency_override
        run: |
          echo "üö® =========================================="
          echo "üö® APPLICATION DU CONTOURNEMENT D'URGENCE"
          echo "üö® =========================================="
          
          # Pr√©parer le message d'urgence
          URGENCY_MESSAGE=$(cat << 'EOL'
          üö® **CONTOURNEMENT D'URGENCE APPLIQU√â** üö®
          
          **D√©tails de l'intervention :**
          - **Timestamp:** ${{ env.EMERGENCY_TIMESTAMP }}
          - **Acteur:** ${{ github.actor }}
          - **Run ID:** ${{ github.run_id }}
          - **Loi ignor√©e:** ${{ inputs.loi_a_ignorer }}
          
          **Raison d√©taill√©e :**
          ${{ inputs.raison }}
          
          **‚ö†Ô∏è IMPORTANT :** Cette action contourne les validations automatiques normales.
          Une review post-merge est recommand√©e pour s'assurer de la conformit√©.
          
          **Tra√ßabilit√© :** Cette action est automatiquement logg√©e et audit√©e.
          
          ---
          *Workflow d'urgence d√©clench√© par ${{ github.actor }} - ${{ github.run_id }}*
          EOL
          )
          
          echo "üìù Message d'urgence pr√©par√©"
          
          # Commenter sur la PR avec justification
          echo "üìù Ajout du commentaire de tra√ßabilit√©..."
          gh pr comment "${{ inputs.pull_request_number }}" --body "$URGENCY_MESSAGE"
          
          # Approuver la Pull Request
          echo "‚úÖ Approbation d'urgence de la PR..."
          gh pr review "${{ inputs.pull_request_number }}" --approve --body "üö® APPROBATION D'URGENCE - Voir commentaire d√©taill√© pour justification"
          
          # Si force merge demand√©
          if [ "${{ inputs.force_merge }}" = "true" ]; then
            echo "üîÄ Tentative de merge forc√©..."
            if gh pr merge "${{ inputs.pull_request_number }}" --merge --delete-branch; then
              echo "‚úÖ Merge forc√© r√©ussi"
              echo "merge_status=SUCCESS" >> $GITHUB_OUTPUT
            else
              echo "‚ö†Ô∏è Merge forc√© √©chou√© (peut n√©cessiter intervention manuelle)"
              echo "merge_status=FAILED" >> $GITHUB_OUTPUT
            fi
          else
            echo "‚è∏Ô∏è Merge forc√© non demand√© - PR approuv√©e mais non merg√©e"
            echo "merge_status=SKIPPED" >> $GITHUB_OUTPUT
          fi
          
          echo "emergency_applied=true" >> $GITHUB_OUTPUT
      
      - name: "üìã Rapport d'urgence et tra√ßabilit√©"
        run: |
          echo "## üö® Rapport de Contournement d'Urgence" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Pull Request concern√©e :** #${{ inputs.pull_request_number }}" >> $GITHUB_STEP_SUMMARY
          echo "**Titre :** ${{ steps.check_pr.outputs.pr_title }}" >> $GITHUB_STEP_SUMMARY  
          echo "**Auteur original :** ${{ steps.check_pr.outputs.pr_author }}" >> $GITHUB_STEP_SUMMARY
          echo "**URL :** ${{ steps.check_pr.outputs.pr_url }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**üö® Action d'urgence effectu√©e :**" >> $GITHUB_STEP_SUMMARY
          echo "- Loi ignor√©e : ${{ inputs.loi_a_ignorer }}" >> $GITHUB_STEP_SUMMARY
          echo "- Acteur : ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "- Timestamp : ${{ env.EMERGENCY_TIMESTAMP }}" >> $GITHUB_STEP_SUMMARY
          echo "- Merge forc√© : ${{ inputs.force_merge }}" >> $GITHUB_STEP_SUMMARY
          echo "- Statut merge : ${{ steps.emergency_override.outputs.merge_status }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Justification :**" >> $GITHUB_STEP_SUMMARY
          echo "${{ inputs.raison }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "‚ö†Ô∏è **Cette intervention d'urgence est trac√©e et audit√©e.**" >> $GITHUB_STEP_SUMMARY
          
          # Log pour audit externe
          echo "üîç G√©n√©ration des logs d'audit..."
          cat > emergency_audit_log.json << EOL
          {
            "emergency_override": {
              "timestamp": "${{ env.EMERGENCY_TIMESTAMP }}",
              "github_run_id": "${{ github.run_id }}",
              "actor": "${{ github.actor }}",
              "pull_request": {
                "number": "${{ inputs.pull_request_number }}",
                "title": "${{ steps.check_pr.outputs.pr_title }}",
                "author": "${{ steps.check_pr.outputs.pr_author }}",
                "url": "${{ steps.check_pr.outputs.pr_url }}"
              },
              "override_details": {
                "law_ignored": "${{ inputs.loi_a_ignorer }}",
                "reason": "${{ inputs.raison }}",
                "force_merge": "${{ inputs.force_merge }}",
                "merge_status": "${{ steps.emergency_override.outputs.merge_status }}"
              }
            }
          }
          EOL
          
          echo "üìÑ Log d'audit g√©n√©r√© : emergency_audit_log.json"
          echo "‚úÖ Contournement d'urgence termin√© avec tra√ßabilit√© compl√®te"
      
      - name: "üì§ Upload du log d'audit"
        uses: actions/upload-artifact@v3
        with:
          name: emergency-audit-log-${{ env.EMERGENCY_TIMESTAMP }}
          path: emergency_audit_log.json
          retention-days: 365  # Garder 1 an pour audit
      
      - name: "‚ö†Ô∏è Notification post-urgence"
        run: |
          echo "‚ö†Ô∏è ============================================="
          echo "‚ö†Ô∏è CONTOURNEMENT D'URGENCE TERMIN√â"
          echo "‚ö†Ô∏è ============================================="
          echo ""
          echo "‚úÖ Actions effectu√©es avec succ√®s :"
          echo "   ‚Ä¢ Commentaire de tra√ßabilit√© ajout√©"
          echo "   ‚Ä¢ Pull Request approuv√©e en urgence"
          echo "   ‚Ä¢ Log d'audit g√©n√©r√© et archiv√©"
          
          if [ "${{ inputs.force_merge }}" = "true" ]; then
            if [ "${{ steps.emergency_override.outputs.merge_status }}" = "SUCCESS" ]; then
              echo "   ‚Ä¢ Merge forc√© r√©ussi ‚úÖ"
            else
              echo "   ‚Ä¢ Merge forc√© √©chou√© ‚ö†Ô∏è"
              echo ""
              echo "üîß Action manuelle requise :"
              echo "   V√©rifiez manuellement la PR #${{ inputs.pull_request_number }}"
            fi
          fi
          
          echo ""
          echo "üìã Recommandations post-urgence :"
          echo "   1. V√©rifiez que la PR merg√©e fonctionne correctement"
          echo "   2. Planifiez une review post-merge si n√©cessaire"
          echo "   3. Consid√©rez mettre √† jour les r√®gles de validation"
          echo "   4. Le log d'audit est disponible pendant 365 jours"
          echo ""
          echo "üîç Tra√ßabilit√© : Run ID ${{ github.run_id }}"
