name: "Test Unitaire : Briques Fondamentales"

# D√©clenchement manuel pour les tests
on:
  workflow_dispatch:
    inputs:
      test_niveau:
        description: "Niveau de test √† ex√©cuter"
        required: false
        default: "complet"
        type: choice
        options:
          - complet
          - nettoyeurs-seulement
          - travailleurs-seulement
      mode_debug:
        description: "Activer le mode debug"
        required: false
        default: false
        type: boolean

# Permissions n√©cessaires pour les tests
permissions:
  contents: read
  issues: write
  checks: write
  statuses: write

jobs:
  # ============================================================================
  # TESTS DES NETTOYEURS (Niveau 7)
  # ============================================================================
  
  test-nettoyeur-csv:
    name: "Test Nettoyeur : Formateur CSV"
    runs-on: ubuntu-latest
    if: inputs.test_niveau == 'complet' || inputs.test_niveau == 'nettoyeurs-seulement'
    
    steps:
      - name: "Checkout du code"
        uses: actions/checkout@v4
      
      - name: "Pr√©paration donn√©es test CSV"
        run: |
          # Cr√©ation de donn√©es JSON de test
          cat << 'JSON_DATA' > test-data.json
          [
            {"nom": "Fichier A", "lignes": 150, "violations": 2, "statut": "OK"},
            {"nom": "Fichier B", "lignes": 250, "violations": 0, "statut": "OK"},
            {"nom": "Fichier C", "lignes": 350, "violations": 5, "statut": "WARNING"}
          ]
          JSON_DATA
          
          echo "üìÑ Donn√©es de test cr√©√©es"
      
      - name: "Upload artefact test JSON"
        uses: actions/upload-artifact@v3
        with:
          name: test-data.json
          path: test-data.json
          retention-days: 1
      
      - name: "Test du formateur CSV"
        uses: ./.github/workflows/07-01_formateur-csv.yml
        with:
          artefact_entree_json: "test-data.json"
          nom_fichier_sortie_csv: "rapport-test.csv"
          colonnes: '["nom", "lignes", "violations", "statut"]'
      
      - name: "Validation r√©sultat CSV"
        run: |
          echo "‚úÖ Test Formateur CSV : PASS√â"

  test-nettoyeur-markdown:
    name: "Test Nettoyeur : Formateur Markdown"
    runs-on: ubuntu-latest
    if: inputs.test_niveau == 'complet' || inputs.test_niveau == 'nettoyeurs-seulement'
    
    steps:
      - name: "Checkout du code"
        uses: actions/checkout@v4
      
      - name: "Pr√©paration donn√©es test Markdown"
        run: |
          # Cr√©ation de donn√©es JSON de test
          cat << 'JSON_DATA' > test-stats.json
          {
            "total_fichiers": 25,
            "violations_critiques": 3,
            "score_global": 87.5,
            "violations": [
              {"type": "ligne", "fichier": "main.py", "ligne": 145},
              {"type": "s√©curit√©", "fichier": "auth.py", "ligne": 67},
              {"type": "documentation", "fichier": "utils.py", "ligne": 23}
            ]
          }
          JSON_DATA
          
          echo "üìä Donn√©es statistiques de test cr√©√©es"
      
      - name: "Upload artefact test stats"
        uses: actions/upload-artifact@v3
        with:
          name: test-stats.json
          path: test-stats.json
          retention-days: 1
      
      - name: "Test du formateur Markdown"
        uses: ./.github/workflows/07-02_formateur-markdown.yml
        with:
          artefact_entree_json: "test-stats.json"
          template_markdown: |
            # Rapport de Gouvernance AGI
            
            Date : {{date}}
            
            ## R√©sum√© Global
            - **Total fichiers analys√©s** : {{donnees.total_fichiers}}
            - **Score global** : {{donnees.score_global}}%
            - **Violations critiques** : {{donnees.violations_critiques}}
            
            ## D√©tail des Violations
            {{#each donnees.violations}}
            - **{{item.type}}** dans `{{item.fichier}}` ligne {{item.ligne}}
            {{/each}}
            
            ---
            *Rapport g√©n√©r√© automatiquement*
          nom_fichier_sortie: "rapport-gouvernance.md"
      
      - name: "Validation r√©sultat Markdown"
        run: |
          echo "‚úÖ Test Formateur Markdown : PASS√â"

  test-nettoyeur-statut:
    name: "Test Nettoyeur : Formateur Statut"
    runs-on: ubuntu-latest
    if: inputs.test_niveau == 'complet' || inputs.test_niveau == 'nettoyeurs-seulement'
    
    steps:
      - name: "Checkout du code"
        uses: actions/checkout@v4
      
      - name: "Test du formateur Statut (Succ√®s)"
        uses: ./.github/workflows/07-03_formateur-statut.yml
        with:
          resultat: true
          message_succes: "‚úÖ Test unitaire des briques fondamentales r√©ussi"
          message_echec: "‚ùå Ce message ne devrait pas appara√Ætre"
          nom_check: "AGI-Test/Nettoyeur-Statut-Success"
      
      - name: "Test du formateur Statut (√âchec simul√©)"
        uses: ./.github/workflows/07-03_formateur-statut.yml
        with:
          resultat: false
          message_succes: "Ce message ne devrait pas appara√Ætre"
          message_echec: "‚ö†Ô∏è Test simul√© d'√©chec pour validation du workflow"
          nom_check: "AGI-Test/Nettoyeur-Statut-Failure"
      
      - name: "Validation r√©sultat Statut"
        run: |
          echo "‚úÖ Test Formateur Statut : PASS√â (2 checks cr√©√©s)"

  # ============================================================================
  # TESTS DES TRAVAILLEURS (Niveau 6)
  # ============================================================================
  
  test-travailleur-scanner:
    name: "Test Travailleur : Scanner Fichiers"
    runs-on: ubuntu-latest
    if: inputs.test_niveau == 'complet' || inputs.test_niveau == 'travailleurs-seulement'
    
    steps:
      - name: "Checkout du code"
        uses: actions/checkout@v4
      
      - name: "Test du scanner de fichiers"
        uses: ./.github/workflows/06-01_scanner-fichiers.yml
        with:
          pattern: "*.yml"
          chemin_racine: "./.github/workflows"
          exclusions: '["test-*", "*temp*"]'
          nom_artefact: "fichiers-workflows-test.json"
      
      - name: "Validation r√©sultat Scanner"
        run: |
          echo "‚úÖ Test Scanner Fichiers : PASS√â"

  test-travailleur-regex:
    name: "Test Travailleur : Applicateur Regex"
    runs-on: ubuntu-latest
    if: inputs.test_niveau == 'complet' || inputs.test_niveau == 'travailleurs-seulement'
    
    steps:
      - name: "Checkout du code"
        uses: actions/checkout@v4
      
      - name: "Pr√©paration contenu test regex"
        run: |
          cat << 'TEST_CONTENT' > test-code.py
          # Fichier test pour regex
          import os
          import sys
          
          def fonction_test():
              print("TODO: Impl√©menter cette fonction")
              # FIXME: Corriger ce bug
              pass
              
          class ClasseTest:
              def __init__(self):
                  # WARNING: Code temporaire
                  self.value = None
          TEST_CONTENT
          
          echo "üêç Fichier test Python cr√©√©"
      
      - name: "Test de l'applicateur regex (TODO/FIXME)"
        uses: ./.github/workflows/06-02_regex-applicateur.yml
        with:
          contenu: "test-code.py"
          regle_regex: |
            {
              "pattern": "(TODO|FIXME|WARNING):\\s*(.+)",
              "nom": "detecteur_annotations",
              "description": "D√©tecte les annotations TODO, FIXME, WARNING dans le code",
              "flags": ["IGNORECASE"],
              "capture_groupes": true,
              "limite_resultats": 50
            }
          nom_artefact: "annotations-detectees-test.json"
      
      - name: "Validation r√©sultat Regex"
        run: |
          echo "‚úÖ Test Applicateur Regex : PASS√â"

  test-travailleur-ast:
    name: "Test Travailleur : Parser AST"
    runs-on: ubuntu-latest
    if: inputs.test_niveau == 'complet' || inputs.test_niveau == 'travailleurs-seulement'
    
    steps:
      - name: "Checkout du code"
        uses: actions/checkout@v4
      
      - name: "Pr√©paration code test AST"
        run: |
          cat << 'PYTHON_CODE' > test-ast.py
          """Module de test pour l'analyse AST."""
          
          import json
          from typing import List, Dict
          
          class AnalyseurTest:
              """Classe de test pour l'AST."""
              
              def __init__(self, nom: str):
                  self.nom = nom
                  self._data = {}
              
              def analyser(self, fichiers: List[str]) -> Dict[str, int]:
                  """Analyse les fichiers fournis."""
                  resultats = {}
                  for fichier in fichiers:
                      if fichier.endswith('.py'):
                          resultats[fichier] = len(fichier)
                  return resultats
              
              @staticmethod
              def utilitaire() -> bool:
                  """Fonction utilitaire statique."""
                  return True
          
          def fonction_globale(param1, param2=None):
              """Fonction au niveau module."""
              try:
                  if param1 and param2:
                      return param1 + param2
                  return param1
              except Exception as e:
                  print(f"Erreur: {e}")
                  return None
          PYTHON_CODE
          
          echo "üêç Code Python test AST cr√©√©"
      
      - name: "Test du parser AST"
        uses: ./.github/workflows/06-03_ast-parser.yml
        with:
          contenu_fichier_python: "test-ast.py"
          niveau_detail: "complet"
          nom_artefact: "ast-analyse-test.json"
      
      - name: "Validation r√©sultat AST"
        run: |
          echo "‚úÖ Test Parser AST : PASS√â"

  test-travailleur-github-poster:
    name: "Test Travailleur : GitHub Poster"
    runs-on: ubuntu-latest
    if: inputs.test_niveau == 'complet' || inputs.test_niveau == 'travailleurs-seulement'
    
    steps:
      - name: "Checkout du code"
        uses: actions/checkout@v4
      
      - name: "Test du poster GitHub"
        uses: ./.github/workflows/06-04_github-poster.yml
        with:
          titre: "üß™ Test Unitaire - Workflow AGI Gouvernance"
          corps: |
            ## Test Automatis√© des Briques Fondamentales
            
            Cette issue a √©t√© cr√©√©e automatiquement lors du test unitaire des workflows de gouvernance AGI.
            
            **D√©tails du test :**
            - Workflow : GitHub Poster
            - Date : ${{ github.run_id }}
            - Branche : ${{ github.ref }}
            
            **R√©sultat attendu :** ‚úÖ Succ√®s
            
            > Cette issue peut √™tre ferm√©e apr√®s validation du test.
          labels: '["test", "automation", "agi-gouvernance"]'
          assignes: '[]'
      
      - name: "Validation r√©sultat GitHub Poster"
        run: |
          echo "‚úÖ Test GitHub Poster : PASS√â (Issue cr√©√©e)"

  test-travailleur-archiveur:
    name: "Test Travailleur : Archiveur ZIP"
    runs-on: ubuntu-latest
    if: inputs.test_niveau == 'complet' || inputs.test_niveau == 'travailleurs-seulement'
    
    steps:
      - name: "Checkout du code"
        uses: actions/checkout@v4
      
      - name: "Pr√©paration fichiers test archivage"
        run: |
          mkdir -p test-archive/dossier1
          mkdir -p test-archive/dossier2
          
          echo "Fichier test 1" > test-archive/fichier1.txt
          echo "Fichier test 2" > test-archive/fichier2.txt
          echo "Contenu dossier 1" > test-archive/dossier1/contenu1.md
          echo "Contenu dossier 2" > test-archive/dossier2/contenu2.md
          
          # Cr√©er aussi quelques scripts de test
          echo "#!/bin/bash\necho 'Script test'" > test-archive/script.sh
          chmod +x test-archive/script.sh
          
          echo "üì¶ Fichiers de test pr√©par√©s pour l'archivage"
          find test-archive -type f -exec ls -la {} \;
      
      - name: "Test de l'archiveur ZIP"
        uses: ./.github/workflows/06-05_archiveur-zip.yml
        with:
          nom_archive: "test-briques-fondamentales.zip"
          fichiers_a_zipper: '["test-archive/", ".github/scripts/travailleur_*.py"]'
          compression: "deflate"
          inclure_dossiers_vides: true
      
      - name: "Validation r√©sultat Archiveur"
        run: |
          echo "‚úÖ Test Archiveur ZIP : PASS√â"

  test-travailleur-git-historien:
    name: "Test Travailleur : Git Historien"
    runs-on: ubuntu-latest
    if: inputs.test_niveau == 'complet' || inputs.test_niveau == 'travailleurs-seulement'
    
    steps:
      - name: "Checkout du code avec historique"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: "Test du Git Historien (dernier commit)"
        uses: ./.github/workflows/06-06_git-historien.yml
        with:
          chemin_fichier_ou_dossier: ".github/workflows"
          format_sortie: "iso"
          operation: "last_commit"
          generer_artefact: true
      
      - name: "Test du Git Historien (premier commit)"
        uses: ./.github/workflows/06-06_git-historien.yml
        with:
          chemin_fichier_ou_dossier: "README.md"
          format_sortie: "human"
          operation: "first_commit"
          generer_artefact: false
      
      - name: "Validation r√©sultat Git Historien"
        run: |
          echo "‚úÖ Test Git Historien : PASS√â (2 op√©rations test√©es)"

  # ============================================================================
  # RAPPORT FINAL DES TESTS
  # ============================================================================
  
  rapport-final-tests:
    name: "Rapport Final des Tests Unitaires"
    runs-on: ubuntu-latest
    needs: [
      test-nettoyeur-csv, test-nettoyeur-markdown, test-nettoyeur-statut,
      test-travailleur-scanner, test-travailleur-regex, test-travailleur-ast,
      test-travailleur-github-poster, test-travailleur-archiveur, test-travailleur-git-historien
    ]
    if: always()
    
    steps:
      - name: "Checkout du code"
        uses: actions/checkout@v4
      
      - name: "Analyse des r√©sultats des tests"
        run: |
          echo "üìä RAPPORT FINAL DES TESTS UNITAIRES - BRIQUES FONDAMENTALES"
          echo "=============================================================="
          
          # Comptage des tests selon les conditions
          total_tests=9
          passed_tests=0
          failed_tests=0
          skipped_tests=0
          
          # Analyse des r√©sultats (simul√© pour l'exemple)
          tests=(
            "test-nettoyeur-csv:${{ needs.test-nettoyeur-csv.result }}"
            "test-nettoyeur-markdown:${{ needs.test-nettoyeur-markdown.result }}"
            "test-nettoyeur-statut:${{ needs.test-nettoyeur-statut.result }}"
            "test-travailleur-scanner:${{ needs.test-travailleur-scanner.result }}"
            "test-travailleur-regex:${{ needs.test-travailleur-regex.result }}"
            "test-travailleur-ast:${{ needs.test-travailleur-ast.result }}"
            "test-travailleur-github-poster:${{ needs.test-travailleur-github-poster.result }}"
            "test-travailleur-archiveur:${{ needs.test-travailleur-archiveur.result }}"
            "test-travailleur-git-historien:${{ needs.test-travailleur-git-historien.result }}"
          )
          
          echo ""
          echo "üß™ R√âSULTATS D√âTAILL√âS :"
          for test in "${tests[@]}"; do
            name="${test%%:*}"
            result="${test##*:}"
            case "$result" in
              "success")
                echo "   ‚úÖ $name : PASS√â"
                ((passed_tests++))
                ;;
              "failure")
                echo "   ‚ùå $name : √âCHOU√â"
                ((failed_tests++))
                ;;
              "cancelled"|"skipped")
                echo "   ‚è≠Ô∏è  $name : IGNOR√â"
                ((skipped_tests++))
                ;;
              *)
                echo "   ‚ùì $name : STATUT INCONNU ($result)"
                ;;
            esac
          done
          
          echo ""
          echo "üìà STATISTIQUES FINALES :"
          echo "   ‚Ä¢ Tests ex√©cut√©s : $((passed_tests + failed_tests))"
          echo "   ‚Ä¢ Tests r√©ussis : $passed_tests"
          echo "   ‚Ä¢ Tests √©chou√©s : $failed_tests"
          echo "   ‚Ä¢ Tests ignor√©s : $skipped_tests"
          
          success_rate=0
          if [ $((passed_tests + failed_tests)) -gt 0 ]; then
            success_rate=$(( passed_tests * 100 / (passed_tests + failed_tests) ))
          fi
          echo "   ‚Ä¢ Taux de succ√®s : ${success_rate}%"
          
          echo ""
          if [ $failed_tests -eq 0 ]; then
            echo "üéâ TOUS LES TESTS SONT PASS√âS AVEC SUCC√àS !"
            echo "‚úÖ Les briques fondamentales (Niveaux 6 & 7) sont op√©rationnelles"
            echo "üöÄ Pr√™t pour la Phase 3 : Construction des Cha√Ænes de Production"
          else
            echo "‚ö†Ô∏è  $failed_tests TEST(S) ONT √âCHOU√â"
            echo "üîß Veuillez corriger les probl√®mes avant de continuer"
          fi
      
      - name: "Cr√©ation du check de statut final"
        uses: ./.github/workflows/07-03_formateur-statut.yml
        with:
          resultat: ${{ needs.test-nettoyeur-csv.result == 'success' && needs.test-nettoyeur-markdown.result == 'success' && needs.test-nettoyeur-statut.result == 'success' && needs.test-travailleur-scanner.result == 'success' && needs.test-travailleur-regex.result == 'success' && needs.test-travailleur-ast.result == 'success' && needs.test-travailleur-github-poster.result == 'success' && needs.test-travailleur-archiveur.result == 'success' && needs.test-travailleur-git-historien.result == 'success' }}
          message_succes: "‚úÖ Tests unitaires des briques fondamentales : TOUS PASS√âS"
          message_echec: "‚ùå Tests unitaires des briques fondamentales : √âCHECS D√âTECT√âS"
          nom_check: "AGI-Gouvernance/Tests-Briques-Fondamentales"

  # ============================================================================
  # JOB DE DEBUG (si activ√©)
  # ============================================================================
  
  debug-environnement:
    name: "Debug Environnement de Test"
    runs-on: ubuntu-latest
    if: inputs.mode_debug
    
    steps:
      - name: "Checkout du code"
        uses: actions/checkout@v4
      
      - name: "Informations environnement"
        run: |
          echo "üîç DEBUG - ENVIRONNEMENT DE TEST"
          echo "================================="
          echo "‚Ä¢ Syst√®me : $(uname -a)"
          echo "‚Ä¢ Python : $(python3 --version)"
          echo "‚Ä¢ Git : $(git --version)"
          echo "‚Ä¢ Espace disque : $(df -h . | tail -1)"
          echo "‚Ä¢ Variables GitHub Actions :"
          echo "  - GITHUB_REPOSITORY : $GITHUB_REPOSITORY"
          echo "  - GITHUB_REF : $GITHUB_REF"
          echo "  - GITHUB_SHA : $GITHUB_SHA"
          echo "  - GITHUB_RUN_ID : $GITHUB_RUN_ID"
          echo ""
          echo "üìÅ Structure des workflows :"
          find .github/workflows -name "*.yml" | head -10
          echo ""
          echo "üêç Scripts handlers disponibles :"
          find .github/scripts -name "*.py" | head -10
