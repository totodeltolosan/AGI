name: "Travailleur : Git Historien"

on:
  workflow_call:
    inputs:
      chemin_fichier_ou_dossier:
        description: "Chemin vers le fichier ou dossier à analyser"
        required: true
        type: string
      format_sortie:
        description: "Format de la date retournée (timestamp/iso/human)"
        required: false
        default: "iso"
        type: string
      operation:
        description: "Type d'opération (last_commit/first_commit/all_commits)"
        required: false
        default: "last_commit"
        type: string
      generer_artefact:
        description: "Générer un artefact JSON avec les détails complets"
        required: false
        default: true
        type: boolean
    outputs:
      date_commit:
        description: "Date du commit (format selon format_sortie)"
        value: ${{ jobs.git_history.outputs.date_output }}
      commit_hash:
        description: "Hash du commit principal trouvé"
        value: ${{ jobs.git_history.outputs.commit_hash }}
      commit_author:
        description: "Auteur du commit"
        value: ${{ jobs.git_history.outputs.commit_author }}
      total_commits:
        description: "Nombre total de commits trouvés"
        value: ${{ jobs.git_history.outputs.total_commits }}
      artefact_file:
        description: "Nom du fichier d'artefact généré"
        value: ${{ jobs.git_history.outputs.artefact_file }}

jobs:
  git_history:
    name: "Analyse de l'historique Git"
    runs-on: ubuntu-latest
    
    outputs:
      date_output: ${{ steps.git_analyze.outputs.date_output }}
      commit_hash: ${{ steps.git_analyze.outputs.commit_hash }}
      commit_author: ${{ steps.git_analyze.outputs.commit_author }}
      total_commits: ${{ steps.git_analyze.outputs.total_commits }}
      artefact_file: ${{ steps.git_analyze.outputs.artefact_file }}
    
    steps:
      - name: "Checkout du code"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Récupérer tout l'historique
      
      - name: "Validation des paramètres"
        run: |
          echo "🔍 Validation des paramètres..."
          
          # Validation du format de sortie
          if [[ ! "${{ inputs.format_sortie }}" =~ ^(timestamp|iso|human)$ ]]; then
            echo "❌ Format de sortie invalide : ${{ inputs.format_sortie }}"
            echo "   Formats valides : timestamp, iso, human"
            exit 1
          fi
          
          # Validation de l'opération
          if [[ ! "${{ inputs.operation }}" =~ ^(last_commit|first_commit|all_commits)$ ]]; then
            echo "❌ Opération invalide : ${{ inputs.operation }}"
            echo "   Opérations valides : last_commit, first_commit, all_commits"
            exit 1
          fi
          
          # Vérification de l'existence du chemin
          if [ ! -e "${{ inputs.chemin_fichier_ou_dossier }}" ]; then
            echo "⚠️ Le chemin n'existe pas : ${{ inputs.chemin_fichier_ou_dossier }}"
            echo "   Recherche dans l'historique Git..."
          fi
          
          echo "✅ Paramètres validés"
      
      - name: "Analyse de l'historique Git"
        id: git_analyze
        run: |
          echo "📚 Analyse de l'historique Git..."
          
          chemin="${{ inputs.chemin_fichier_ou_dossier }}"
          operation="${{ inputs.operation }}"
          format="${{ inputs.format_sortie }}"
          
          # Fonction pour formater la date
          format_date() {
            local timestamp="$1"
            local format="$2"
            
            case "$format" in
              timestamp)
                echo "$timestamp"
                ;;
              iso)
                date -d "@$timestamp" -Iseconds
                ;;
              human)
                date -d "@$timestamp" "+%Y-%m-%d %H:%M:%S"
                ;;
            esac
          }
          
          # Récupération des commits
          case "$operation" in
            last_commit)
              commit_info=$(git log -1 --format="%H|%at|%an|%ae|%s" -- "$chemin" 2>/dev/null)
              ;;
            first_commit)
              commit_info=$(git log --reverse --format="%H|%at|%an|%ae|%s" -- "$chemin" 2>/dev/null | head -1)
              ;;
            all_commits)
              # Pour all_commits, on récupère tout et on prend le dernier pour les outputs principaux
              all_commits=$(git log --format="%H|%at|%an|%ae|%s" -- "$chemin" 2>/dev/null)
              commit_info=$(echo "$all_commits" | head -1)
              ;;
          esac
          
          if [ -z "$commit_info" ]; then
            echo "⚠️ Aucun historique Git trouvé pour : $chemin"
            echo "date_output=" >> $GITHUB_OUTPUT
            echo "commit_hash=" >> $GITHUB_OUTPUT
            echo "commit_author=" >> $GITHUB_OUTPUT
            echo "total_commits=0" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Extraction des informations
          IFS='|' read -r hash timestamp author email subject <<< "$commit_info"
          
          # Formatage de la date
          formatted_date=$(format_date "$timestamp" "$format")
          
          # Comptage total des commits
          total=$(git rev-list --count HEAD -- "$chemin" 2>/dev/null || echo "0")
          
          # Définition des outputs
          echo "date_output=$formatted_date" >> $GITHUB_OUTPUT
          echo "commit_hash=$hash" >> $GITHUB_OUTPUT
          echo "commit_author=$author <$email>" >> $GITHUB_OUTPUT
          echo "total_commits=$total" >> $GITHUB_OUTPUT
          
          echo "✅ Historique analysé avec succès"
          echo "   - Commit : $hash"
          echo "   - Date : $formatted_date"
          echo "   - Auteur : $author"
          echo "   - Total commits : $total"
          
          # Génération de l'artefact JSON si demandé
          if [ "${{ inputs.generer_artefact }}" = "true" ]; then
            artefact_name="git_history_$(date +%Y%m%d_%H%M%S).json"
            
            # Créer le fichier JSON avec Python (version inline pour éviter les problèmes d'indentation)
            cat > create_json.py << 'PYEOF'
          import json
          import sys
          import os
          
          chemin = os.environ.get('GIT_CHEMIN', '')
          operation = os.environ.get('GIT_OPERATION', '')
          format_sortie = os.environ.get('GIT_FORMAT', '')
          hash_val = os.environ.get('GIT_HASH', '')
          timestamp = os.environ.get('GIT_TIMESTAMP', '')
          formatted_date = os.environ.get('GIT_DATE', '')
          author = os.environ.get('GIT_AUTHOR', '')
          email = os.environ.get('GIT_EMAIL', '')
          subject = os.environ.get('GIT_SUBJECT', '')
          total = int(os.environ.get('GIT_TOTAL', '0'))
          all_commits_raw = os.environ.get('GIT_ALL_COMMITS', '')
          artefact_name = os.environ.get('GIT_ARTEFACT', '')
          
          data = {
              "chemin": chemin,
              "operation": operation,
              "format": format_sortie,
              "commit_principal": {
                  "hash": hash_val,
                  "timestamp": timestamp,
                  "date_formatee": formatted_date,
                  "auteur": author,
                  "email": email,
                  "sujet": subject
              },
              "statistiques": {
                  "total_commits": total
              }
          }
          
          # Pour all_commits, ajouter la liste complète
          if operation == "all_commits" and all_commits_raw:
              commits_list = []
              for line in all_commits_raw.strip().split('\n'):
                  if line:
                      parts = line.split('|')
                      if len(parts) >= 5:
                          commits_list.append({
                              "hash": parts[0],
                              "timestamp": parts[1],
                              "auteur": parts[2],
                              "email": parts[3],
                              "sujet": parts[4]
                          })
              data["tous_les_commits"] = commits_list
          
          with open(artefact_name, 'w') as f:
              json.dump(data, f, indent=2, ensure_ascii=False)
          
          print(f"Artefact JSON généré : {artefact_name}")
          PYEOF
            
            # Exporter les variables pour Python
            export GIT_CHEMIN="$chemin"
            export GIT_OPERATION="$operation"
            export GIT_FORMAT="$format"
            export GIT_HASH="$hash"
            export GIT_TIMESTAMP="$timestamp"
            export GIT_DATE="$formatted_date"
            export GIT_AUTHOR="$author"
            export GIT_EMAIL="$email"
            export GIT_SUBJECT="$subject"
            export GIT_TOTAL="$total"
            export GIT_ALL_COMMITS="${all_commits:-}"
            export GIT_ARTEFACT="$artefact_name"
            
            # Exécuter le script Python
            python3 create_json.py
            
            # Nettoyer
            rm -f create_json.py
            
            echo "artefact_file=$artefact_name" >> $GITHUB_OUTPUT
          fi
      
      - name: "Upload de l'artefact"
        if: inputs.generer_artefact && steps.git_analyze.outputs.artefact_file != ''
        uses: actions/upload-artifact@v4
        with:
          name: git-history-${{ github.run_id }}
          path: ${{ steps.git_analyze.outputs.artefact_file }}
          retention-days: 7
      
      - name: "Génération du rapport"
        if: always()
        run: |
          echo "## 📚 Analyse Historique Git" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Chemin analysé :** \`${{ inputs.chemin_fichier_ou_dossier }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Opération :** ${{ inputs.operation }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ -n "${{ steps.git_analyze.outputs.date_output }}" ]; then
            echo "**✅ Résultats :**" >> $GITHUB_STEP_SUMMARY
            echo "- Date : \`${{ steps.git_analyze.outputs.date_output }}\`" >> $GITHUB_STEP_SUMMARY
            echo "- Commit : \`${{ steps.git_analyze.outputs.commit_hash }}\`" >> $GITHUB_STEP_SUMMARY
            echo "- Auteur : ${{ steps.git_analyze.outputs.commit_author }}" >> $GITHUB_STEP_SUMMARY
            echo "- Total commits : ${{ steps.git_analyze.outputs.total_commits }}" >> $GITHUB_STEP_SUMMARY
          else
            echo "**⚠️ Résultat :** Aucun historique Git trouvé" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Format de sortie :** ${{ inputs.format_sortie }}" >> $GITHUB_STEP_SUMMARY
      
      - name: "Debug - Historique détaillé"
        if: runner.debug == '1'
        run: |
          echo "🔍 Historique Git détaillé pour : ${{ inputs.chemin_fichier_ou_dossier }}"
          git log --oneline -10 -- "${{ inputs.chemin_fichier_ou_dossier }}" || echo "Aucun historique trouvé"
          
          if [ -n "${{ steps.git_analyze.outputs.artefact_file }}" ] && [ -f "${{ steps.git_analyze.outputs.artefact_file }}" ]; then
            echo "📄 Contenu de l'artefact JSON :"
            cat "${{ steps.git_analyze.outputs.artefact_file }}"
          fi
