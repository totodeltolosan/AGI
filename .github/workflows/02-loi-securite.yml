name: "G√©n√©ral Gardien - Niveau 2 - Audit S√©curit√©"

on:
  workflow_call:
    inputs:
      regles_securite:
        description: "R√®gles de s√©curit√© JSON (patterns, descriptions, s√©v√©rit√©s)"
        required: false
        default: '[{"pattern":"password\\s*=\\s*[\"'']\\w+[\"'']","description":"Mot de passe en dur","severite":"critique"}]'
        type: string
      extensions_scan:
        description: "Extensions de fichiers √† scanner"
        required: false
        default: "py,js,yml,yaml,json"
        type: string
      repertoire_scan:
        description: "R√©pertoire √† scanner"
        required: false
        default: "."
        type: string
    outputs:
      violations_critiques:
        description: "Nombre de violations critiques"
        value: ${{ jobs.audit_securite.outputs.critiques }}
      rapport_securite:
        description: "Rapport complet de s√©curit√©"
        value: ${{ jobs.audit_securite.outputs.rapport }}

jobs:
  audit_securite:
    name: "Audit S√©curit√©"
    runs-on: ubuntu-latest
    outputs:
      critiques: ${{ steps.scan.outputs.violations_critiques }}
      rapport: ${{ steps.scan.outputs.rapport_path }}
    
    steps:
      - name: "Checkout"
        uses: actions/checkout@v4
        
      - name: "Ex√©cution du Contrema√Ætre S√©curit√©"
        id: scan
        run: |
          echo "üîí Lancement de l'audit s√©curit√©"
          echo "Extensions: ${{ inputs.extensions_scan }}"
          echo "R√©pertoire: ${{ inputs.repertoire_scan }}"
          
          # Cr√©ation du fichier de r√®gles
          echo '${{ inputs.regles_securite }}' > regles_securite.json
          
          # Appel du script contrema√Ætre (Niveau 3)
          python3 .github/scripts/audit_securite.py \
            --regles regles_securite.json \
            --extensions "${{ inputs.extensions_scan }}" \
            --repertoire "${{ inputs.repertoire_scan }}" \
            --output rapport_securite.json
          
          echo "rapport_path=rapport_securite.json" >> $GITHUB_OUTPUT
          
          # Extraction du nombre de violations critiques
          critiques=$(python3 -c "import json; data = json.load(open('rapport_securite.json')); print(len(data.get('violations', {}).get('critique', [])))")
          echo "violations_critiques=$critiques" >> $GITHUB_OUTPUT
          
          if [ "$critiques" -gt 0 ]; then
            echo "‚ö†Ô∏è ALERTE: $critiques violation(s) critique(s) d√©tect√©e(s)"
          fi
          
      - name: "Upload Rapport S√©curit√©"
        uses: actions/upload-artifact@v4
        with:
          name: rapport-securite-${{ github.run_id }}
          path: rapport_securite.json
          retention-days: 30
