name: "Travailleur : GitHub Poster"

on:
  workflow_call:
    inputs:
      titre:
        description: "Titre de l'issue √† cr√©er"
        required: true
        type: string
      corps:
        description: "Corps du message de l'issue (Markdown support√©)"
        required: true
        type: string
      labels:
        description: "JSON array des labels √† appliquer (ex: [\"bug\", \"urgent\"])"
        required: false
        default: '[]'
        type: string
      assignes:
        description: "JSON array des utilisateurs √† assigner (ex: [\"username1\", \"username2\"])"
        required: false
        default: '[]'
        type: string
      milestone:
        description: "ID ou nom du milestone √† associer (optionnel)"
        required: false
        type: string
    outputs:
      issue_url:
        description: "URL de l'issue cr√©√©e"
        value: ${{ jobs.create_issue.outputs.url }}
      issue_number:
        description: "Num√©ro de l'issue cr√©√©e"
        value: ${{ jobs.create_issue.outputs.number }}

# Permissions n√©cessaires pour cr√©er des issues
permissions:
  issues: write
  contents: read

jobs:
  create_issue:
    name: "Cr√©ation issue GitHub"
    runs-on: ubuntu-latest
    outputs:
      url: ${{ steps.poster.outputs.issue_url }}
      number: ${{ steps.poster.outputs.issue_number }}
    
    steps:
      - name: "Checkout du code"
        uses: actions/checkout@v5
      
      - name: "Configuration Python 3.11"
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: "Installation des d√©pendances Python"
        run: |
          python -m pip install --upgrade pip
          pip install requests
      
      - name: "Configuration GitHub CLI (fallback)"
        run: |
          # GitHub CLI est d√©j√† install√© sur ubuntu-latest
          gh --version
          echo "üîß GitHub CLI configur√© en fallback"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: "Validation des param√®tres d'entr√©e"
        run: |
          echo "üîç Validation des param√®tres :"
          
          # Validation du titre (non vide)
          if [ -z "${{ inputs.titre }}" ]; then
            echo "‚ùå ERREUR: Titre requis mais vide"
            exit 1
          fi
          echo "‚úÖ Titre : OK ($(echo '${{ inputs.titre }}' | wc -c) caract√®res)"
          
          # Validation du corps (non vide)
          if [ -z "${{ inputs.corps }}" ]; then
            echo "‚ùå ERREUR: Corps requis mais vide"
            exit 1
          fi
          echo "‚úÖ Corps : OK ($(echo '${{ inputs.corps }}' | wc -c) caract√®res)"
          
          # Validation des labels JSON
          python -c "import json; import sys; try:; labels = json.loads('${{ inputs.labels }}'); if not isinstance(labels, list):; raise ValueError('Labels doivent √™tre une liste'); print(f'‚úÖ Labels : OK ({len(labels)} labels)'); for label in labels:; print(f'   - {label}'); except Exception as e:; print(f'‚ùå ERREUR Labels: {e}'); sys.exit(1)"
          # Validation des assign√©s JSON
          python -c "import json; import sys; try:; assignes = json.loads('${{ inputs.assignes }}'); if not isinstance(assignes, list):; raise ValueError('Assign√©s doivent √™tre une liste'); print(f'‚úÖ Assign√©s : OK ({len(assignes)} assign√©s)'); for assigne in assignes:; print(f'   - {assigne}'); except Exception as e:; print(f'‚ùå ERREUR Assign√©s: {e}'); sys.exit(1)"
      - name: "Ex√©cution du poster GitHub"
        id: poster
        run: |
          python .github/scripts/travailleur_github_poster.py \
            --titre "${{ inputs.titre }}" \
            --corps "${{ inputs.corps }}" \
            --labels '${{ inputs.labels }}' \
            --assignes '${{ inputs.assignes }}' \
            ${{ inputs.milestone && format('--milestone "{0}"', inputs.milestone) || '' }}
          
          echo "üé´ Issue GitHub trait√©e"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
      
      - name: "Validation de la cr√©ation d'issue"
        run: |
          if [ -n "${{ steps.poster.outputs.issue_url }}" ]; then
            echo "üìä R√©capitulatif de l'issue cr√©√©e :"
            echo "   ‚Ä¢ Titre : ${{ inputs.titre }}"
            echo "   ‚Ä¢ URL : ${{ steps.poster.outputs.issue_url }}"
            echo "   ‚Ä¢ Num√©ro : #${{ steps.poster.outputs.issue_number }}"
            echo "   ‚Ä¢ Repository : ${{ github.repository }}"
            
            # V√©rification que l'URL est accessible
            if command -v curl >/dev/null; then
              echo "üîó V√©rification de l'accessibilit√© de l'URL :"
              if curl -s -o /dev/null -w "%{http_code}" "${{ steps.poster.outputs.issue_url }}" | grep -q "200"; then
                echo "‚úÖ Issue accessible publiquement"
              else
                echo "‚ö†Ô∏è  Issue peut ne pas √™tre imm√©diatement accessible"
              fi
            fi
            
            echo "‚úÖ Issue GitHub cr√©√©e avec succ√®s"
          else
            echo "‚ùå ERREUR: Aucune URL d'issue retourn√©e"
            exit 1
          fi
      
      - name: "Affichage du r√©sum√© dans l'interface"
        if: always()
        run: |
          if [ -n "${{ steps.poster.outputs.issue_url }}" ]; then
            echo "## üé´ Issue GitHub Cr√©√©e avec Succ√®s" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Titre :** ${{ inputs.titre }}" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**URL :** [${{ steps.poster.outputs.issue_url }}](${{ steps.poster.outputs.issue_url }})" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Num√©ro :** #${{ steps.poster.outputs.issue_number }}" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            if [ '${{ inputs.labels }}' != '[]' ]; then
              echo "**Labels :** ${{ inputs.labels }}" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
            fi
            
            if [ '${{ inputs.assignes }}' != '[]' ]; then
              echo "**Assign√©s :** ${{ inputs.assignes }}" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
            fi
            
            echo "**Cr√©√©e le :** $(date '+%Y-%m-%d %H:%M:%S')" >> $GITHUB_STEP_SUMMARY
          else
            echo "## ‚ùå √âchec de Cr√©ation d'Issue" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "La cr√©ation de l'issue GitHub a √©chou√©. Consultez les logs pour plus de d√©tails." >> $GITHUB_STEP_SUMMARY
          fi
      
      - name: "Debug - Informations environnement GitHub"
        if: runner.debug == '1'
        run: |
          echo "üîç Variables d'environnement GitHub :"
          echo "GITHUB_REPOSITORY=${{ github.repository }}"
          echo "GITHUB_ACTOR=${{ github.actor }}"
          echo "GITHUB_REF=${{ github.ref }}"
          echo "GITHUB_EVENT_NAME=${{ github.event_name }}"
          echo "Permissions issues: ${{ github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository }}"
