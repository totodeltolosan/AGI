name: üèõÔ∏è Constitutional Governance

on:
  push:
  pull_request:
  schedule:
    - cron: '0 */8 * * *'  # Toutes les 8 heures
  workflow_dispatch:

jobs:
  constitutional-governance:
    name: AGI Constitutional Compliance
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Setup Constitutional Environment
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install Constitutional Tools
      run: |
        pip install constitutional-analysis compliance-checker
        pip install governance-tools constitutional-audit
        pip install policy-validation legal-compliance

    - name: Constitutional Audit Full System
      run: |
        echo "üèõÔ∏è AUDIT CONSTITUTIONNEL COMPLET AGI-EVE" > constitutional-report.md
        echo "=========================================" >> constitutional-report.md
        echo "" >> constitutional-report.md

        # Load iaGOD.json if exists
        if [ -f "iaGOD.json" ]; then
          echo "## üìú Constitution iaGOD.json" >> constitutional-report.md
          echo "- ‚úÖ **Constitution**: D√©tect√©e" >> constitutional-report.md

          # Parse constitution
          python -c "
          import json
          try:
              with open('iaGOD.json', 'r', encoding='utf-8') as f:
                  constitution = json.load(f)

              laws_count = len(constitution.get('laws', []))
              principles_count = len(constitution.get('principles', []))

              print(f'- **Lois constitutionnelles**: {laws_count}')
              print(f'- **Principes**: {principles_count}')

              # V√©rifier lois principales
              required_laws = ['200_lines_limit', 'documentation_required', 'security_compliance']
              for law in required_laws:
                  if any(law in str(l) for l in constitution.get('laws', [])):
                      print(f'- ‚úÖ **{law}**: D√©finie')
                  else:
                      print(f'- ‚ö†Ô∏è **{law}**: √Ä d√©finir')

          except Exception as e:
              print(f'- ‚ùå **Erreur constitution**: {e}')
          " >> constitutional-report.md

        else
          echo "- ‚ö†Ô∏è **Constitution**: iaGOD.json non trouv√©" >> constitutional-report.md
        fi
        echo "" >> constitutional-report.md

    - name: 200 Lines Constitutional Law Enforcement
      run: |
        echo "## ‚öñÔ∏è Loi des 200 Lignes - Application" >> constitutional-report.md
        echo "" >> constitutional-report.md

        # Audit exhaustif limite 200 lignes
        python -c "
        import os
        from collections import defaultdict

        print('‚öñÔ∏è Application loi constitutionnelle 200 lignes...')

        violations = []
        compliant_files = []
        module_stats = defaultdict(lambda: {'files': 0, 'violations': 0, 'total_lines': 0})

        # Parcourir tous fichiers Python
        for root, dirs, files in os.walk('.'):
            if '.git' in root:
                continue

            for file in files:
                if file.endswith('.py'):
                    filepath = os.path.join(root, file)
                    module = root.split('/')[0] if '/' in root else 'root'

                    try:
                        with open(filepath, 'r', encoding='utf-8') as f:
                            lines = len(f.readlines())

                        module_stats[module]['files'] += 1
                        module_stats[module]['total_lines'] += lines

                        if lines > 200:
                            excess = lines - 200
                            violations.append({
                                'file': filepath,
                                'lines': lines,
                                'excess': excess,
                                'module': module,
                                'severity': 'critical' if lines > 500 else 'high' if lines > 300 else 'medium'
                            })
                            module_stats[module]['violations'] += 1
                        else:
                            compliant_files.append(filepath)
                    except:
                        pass

        # Statistiques globales
        total_files = sum(stats['files'] for stats in module_stats.values())
        total_violations = len(violations)
        compliance_rate = ((total_files - total_violations) / max(total_files, 1)) * 100

        print(f'- **Total fichiers**: {total_files}')
        print(f'- **Fichiers conformes**: {len(compliant_files)}')
        print(f'- **Violations**: {total_violations}')
        print(f'- **Taux conformit√©**: {compliance_rate:.1f}%')
        print('')

        # Par module
        print('### Conformit√© par Module')
        for module, stats in sorted(module_stats.items()):
            if stats['files'] > 0:
                module_compliance = ((stats['files'] - stats['violations']) / stats['files']) * 100
                avg_lines = stats['total_lines'] / stats['files']
                print(f'- **{module}**: {module_compliance:.1f}% conforme ({stats[\"violations\"]}/{stats[\"files\"]} violations, {avg_lines:.0f} lignes/fichier)')

        print('')

        # Violations critiques
        critical_violations = [v for v in violations if v['severity'] == 'critical']
        if critical_violations:
            print('### üö® Violations Critiques (>500 lignes)')
            for v in critical_violations[:10]:  # Top 10
                print(f'- **{v[\"file\"]}**: {v[\"lines\"]} lignes (exc√®s: {v[\"excess\"]})')

        # Recommandations constitutionnelles
        print('')
        print('### üí° Recommandations Constitutionnelles')

        if compliance_rate < 50:
            print('- üö® **URGENCE CONSTITUTIONNELLE**: Taux conformit√© critique')
            print('- **Action**: Refactoring massif imm√©diat requis')
        elif compliance_rate < 70:
            print('- ‚ö†Ô∏è **ATTENTION CONSTITUTIONNELLE**: Conformit√© insuffisante')
            print('- **Action**: Plan refactoring sur 2 semaines')
        elif compliance_rate < 90:
            print('- üü° **AM√âLIORATION REQUISE**: Bonne base mais perfectible')
            print('- **Action**: Refactoring cibl√© des gros fichiers')
        else:
            print('- ‚úÖ **EXCELLENCE CONSTITUTIONNELLE**: Conformit√© exemplaire')
            print('- **Action**: Maintenir standards √©lev√©s')

        # Sauvegarder rapport d√©taill√©
        with open('constitutional_violations.csv', 'w') as f:
            f.write('Fichier,Lignes,Statut,Exc√®s,Module,S√©v√©rit√©\\n')
            for v in violations:
                f.write(f'{v[\"file\"]},{v[\"lines\"]},VIOLATION,{v[\"excess\"]},{v[\"module\"]},{v[\"severity\"]}\\n')
            for cf in compliant_files:
                module = cf.split('/')[0] if '/' in cf else 'root'
                f.write(f'{cf},‚â§200,CONFORME,0,{module},none\\n')

        print('')
        print('‚úÖ Rapport constitutionnel d√©taill√© sauvegard√©')
        " >> constitutional-report.md

    - name: Security Constitutional Law
      run: |
        echo "" >> constitutional-report.md
        echo "## üõ°Ô∏è Loi Constitutionnelle S√©curit√©" >> constitutional-report.md
        echo "" >> constitutional-report.md

        # Audit s√©curit√© constitutionnelle
        python -c "
        import re
        import os

        print('üõ°Ô∏è Audit s√©curit√© constitutionnelle...')

        security_violations = []
        security_compliant = []

        # R√®gles s√©curit√© constitutionnelles
        security_rules = [
            {'pattern': r'eval\\s*\\(', 'severity': 'critical', 'description': 'Usage eval() interdit'},
            {'pattern': r'exec\\s*\\(', 'severity': 'critical', 'description': 'Usage exec() interdit'},
            {'pattern': r'__import__\\s*\\(', 'severity': 'high', 'description': 'Import dynamique non contr√¥l√©'},
            {'pattern': r'subprocess\\.call\\s*\\(.*shell=True', 'severity': 'critical', 'description': 'Shell injection possible'},
            {'pattern': r'open\\s*\\([^)]*[\"\\']w[\"\\']', 'severity': 'medium', 'description': '√âcriture fichier non contr√¥l√©e'},
            {'pattern': r'pickle\\.loads?\\s*\\(', 'severity': 'high', 'description': 'D√©s√©rialisation pickle dangereuse'},
            {'pattern': r'input\\s*\\(.*\\$', 'severity': 'medium', 'description': 'Input utilisateur non valid√©'}
        ]

        # Scanner tous fichiers Python
        total_files_scanned = 0
        for root, dirs, files in os.walk('.'):
            if '.git' in root:
                continue

            for file in files:
                if file.endswith('.py'):
                    filepath = os.path.join(root, file)
                    total_files_scanned += 1

                    try:
                        with open(filepath, 'r', encoding='utf-8') as f:
                            content = f.read()

                        file_violations = []
                        for rule in security_rules:
                            matches = list(re.finditer(rule['pattern'], content, re.IGNORECASE))
                            for match in matches:
                                line_num = content[:match.start()].count('\\n') + 1
                                file_violations.append({
                                    'file': filepath,
                                    'line': line_num,
                                    'rule': rule['description'],
                                    'severity': rule['severity'],
                                    'code': match.group()
                                })

                        if file_violations:
                            security_violations.extend(file_violations)
                        else:
                            security_compliant.append(filepath)

                    except:
                        pass

        # Statistiques s√©curit√©
        total_violations = len(security_violations)
        security_compliance_rate = (len(security_compliant) / max(total_files_scanned, 1)) * 100

        print(f'- **Fichiers scann√©s**: {total_files_scanned}')
        print(f'- **Conformes s√©curit√©**: {len(security_compliant)}')
        print(f'- **Violations s√©curit√©**: {total_violations}')
        print(f'- **Taux conformit√© s√©curit√©**: {security_compliance_rate:.1f}%')
        print('')

        # Violations par s√©v√©rit√©
        by_severity = {}
        for v in security_violations:
            severity = v['severity']
            if severity not in by_severity:
                by_severity[severity] = []
            by_severity[severity].append(v)

        if by_severity:
            print('### Violations par S√©v√©rit√©')
            for severity in ['critical', 'high', 'medium', 'low']:
                if severity in by_severity:
                    count = len(by_severity[severity])
                    icon = {'critical': 'üö®', 'high': 'üî¥', 'medium': 'üü°', 'low': '‚ö™'}[severity]
                    print(f'- {icon} **{severity.title()}**: {count} violations')

        # Violations critiques d√©tail
        critical_violations = [v for v in security_violations if v['severity'] == 'critical']
        if critical_violations:
            print('')
            print('### üö® Violations Critiques S√©curit√©')
            for v in critical_violations[:5]:  # Top 5
                print(f'- **{v[\"file\"]}:{v[\"line\"]}**: {v[\"rule\"]}')

        # Verdict s√©curit√© constitutionnelle
        print('')
        print('### ‚öñÔ∏è Verdict S√©curit√© Constitutionnelle')

        if critical_violations:
            print('- üö® **NON-CONFORME**: Violations critiques d√©tect√©es')
            print('- **Action**: Correction imm√©diate requise')
        elif len(by_severity.get('high', [])) > 5:
            print('- üî¥ **ATTENTION**: Violations haute s√©v√©rit√©')
            print('- **Action**: Audit s√©curit√© approfondi')
        elif security_compliance_rate >= 95:
            print('- ‚úÖ **CONFORME**: Excellente s√©curit√© constitutionnelle')
        else:
            print('- üü° **ACCEPTABLE**: S√©curit√© constitutionnelle correcte')
        " >> constitutional-report.md

    - name: Documentation Constitutional Law
      run: |
        echo "" >> constitutional-report.md
        echo "## üìö Loi Constitutionnelle Documentation" >> constitutional-report.md
        echo "" >> constitutional-report.md

        # Audit documentation constitutionnelle
        python -c "
        import ast
        import os

        print('üìö Audit documentation constitutionnelle...')

        doc_stats = {
            'total_modules': 0,
            'documented_modules': 0,
            'total_classes': 0,
            'documented_classes': 0,
            'total_functions': 0,
            'documented_functions': 0,
            'missing_docs': []
        }

        # Scanner documentation
        for root, dirs, files in os.walk('.'):
            if '.git' in root:
                continue

            for file in files:
                if file.endswith('.py') and not file.startswith('__'):
                    filepath = os.path.join(root, file)

                    try:
                        with open(filepath, 'r', encoding='utf-8') as f:
                            tree = ast.parse(f.read())

                        doc_stats['total_modules'] += 1

                        # Module docstring
                        module_doc = ast.get_docstring(tree)
                        if module_doc:
                            doc_stats['documented_modules'] += 1
                        else:
                            doc_stats['missing_docs'].append(f'{filepath}: Module sans docstring')

                        # Classes et fonctions
                        for node in ast.walk(tree):
                            if isinstance(node, ast.ClassDef):
                                doc_stats['total_classes'] += 1
                                if ast.get_docstring(node):
                                    doc_stats['documented_classes'] += 1
                                else:
                                    doc_stats['missing_docs'].append(f'{filepath}: Classe {node.name} sans docstring')

                            elif isinstance(node, ast.FunctionDef) and not node.name.startswith('_'):
                                doc_stats['total_functions'] += 1
                                if ast.get_docstring(node):
                                    doc_stats['documented_functions'] += 1
                                else:
                                    doc_stats['missing_docs'].append(f'{filepath}: Fonction {node.name} sans docstring')
                    except:
                        pass

        # Calculs conformit√© documentation
        module_doc_rate = (doc_stats['documented_modules'] / max(doc_stats['total_modules'], 1)) * 100
        class_doc_rate = (doc_stats['documented_classes'] / max(doc_stats['total_classes'], 1)) * 100
        function_doc_rate = (doc_stats['documented_functions'] / max(doc_stats['total_functions'], 1)) * 100
        overall_doc_rate = ((doc_stats['documented_modules'] + doc_stats['documented_classes'] + doc_stats['documented_functions']) /
                           max(doc_stats['total_modules'] + doc_stats['total_classes'] + doc_stats['total_functions'], 1)) * 100

        print(f'- **Modules**: {module_doc_rate:.1f}% document√©s ({doc_stats[\"documented_modules\"]}/{doc_stats[\"total_modules\"]})')
        print(f'- **Classes**: {class_doc_rate:.1f}% document√©es ({doc_stats[\"documented_classes\"]}/{doc_stats[\"total_classes\"]})')
        print(f'- **Fonctions**: {function_doc_rate:.1f}% document√©es ({doc_stats[\"documented_functions\"]}/{doc_stats[\"total_functions\"]})')
        print(f'- **Global**: {overall_doc_rate:.1f}% documentation')
        print('')

        # Verdict documentation constitutionnelle
        print('### ‚öñÔ∏è Verdict Documentation Constitutionnelle')

        if overall_doc_rate >= 90:
            print('- ‚úÖ **EXCELLENCE DOCUMENTAIRE**: Conformit√© exemplaire')
        elif overall_doc_rate >= 70:
            print('- üü¢ **BONNE DOCUMENTATION**: Conformit√© satisfaisante')
        elif overall_doc_rate >= 50:
            print('- üü° **DOCUMENTATION MOYENNE**: Am√©lioration requise')
        else:
            print('- üî¥ **DOCUMENTATION INSUFFISANTE**: Non-conformit√© constitutionnelle')
            print('- **Action**: Documentation massive requise')

        # Modules prioritaires √† documenter
        priority_missing = [doc for doc in doc_stats['missing_docs'] if any(keyword in doc for keyword in ['core/', 'brain', 'engine', 'main'])]
        if priority_missing:
            print('')
            print('### üìã Priorit√©s Documentation')
            for missing in priority_missing[:5]:
                print(f'- {missing}')
        " >> constitutional-report.md

    - name: Create Constitutional Issues
      run: |
        # Cr√©er issues pour violations constitutionnelles critiques
        if [ -f "constitutional_violations.csv" ]; then
          critical_count=$(grep "critical" constitutional_violations.csv | wc -l)

          if [ $critical_count -gt 0 ]; then
            gh issue create \
              --title "üö® VIOLATION CONSTITUTIONNELLE CRITIQUE - $critical_count fichiers" \
              --body-file constitutional-report.md \
              --label "constitutional,critical,urgent" \
              --assignee "@me" || echo "Issue creation failed"
          fi
        fi

    - name: Upload Constitutional Reports
      uses: actions/upload-artifact@v4
      with:
        name: constitutional-governance-report
        path: |
          constitutional-report.md
          constitutional_violations.csv
