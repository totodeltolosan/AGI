# ==============================================================================
# WORKFLOW D'AUDIT CONSTITUTIONNEL POUR LE PROJET AGI
# ------------------------------------------------------------------------------
# Ce workflow ex√©cute une s√©rie d'audits (structure, s√©curit√©, documentation)
# sur la branche principale, g√©n√®re un rapport d√©taill√©, et cr√©e des issues
# pour les violations critiques.
# ==============================================================================

name: Constitutional Governance

# ==============================================================================
# BLOC DE D√âCLENCHEMENT (ON)
# ==============================================================================
on:
  # D√©clenche le workflow sur les push et pull requests, mais UNIQUEMENT sur la branche agi-main.
  push:
    branches:
      - 'agi-main'
  pull_request:
    branches:
      - 'agi-main'

  # D√©clenchement planifi√© (cron) pour un audit r√©gulier.
  schedule:
    - cron: '0 */8 * * *'  # Toutes les 8 heures

  # Permet de lancer manuellement le workflow depuis l'onglet "Actions" de GitHub.
  workflow_dispatch:

# ==============================================================================
# BLOC DE PERMISSIONS
# ==============================================================================
permissions:
  # Permission de LIRE le contenu du d√©p√¥t pour le checkout.
  contents: read
  # Permission d'√âCRIRE des issues pour la cr√©ation d'alertes automatiques.
  issues: write

# ==============================================================================
# BLOC D'EX√âCUTION (JOBS)
# ==============================================================================
jobs:
  audit:
    name: ‚öñÔ∏è AGI Constitutional Compliance Audit
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      # √âtape 1: R√©cup√©rer le code source du d√©p√¥t.
      - name: üì• Checkout Code
        uses: actions/checkout@v4

      # √âtape 2: Mettre en place l'environnement Python.
      - name: üêç Setup Python Environment
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      # √âtape 3: Ex√©cuter le script d'audit principal.
      # Ce script externe contient toute la logique d'audit pour la propret√© et la maintenance.
      - name: üî¨ Execute Constitutional Audit Script
        id: audit_step # ID essentiel pour r√©cup√©rer les outputs du script
        run: |
          python .github/scripts/run_audit.py

      # √âtape 4: Cr√©er une issue en cas de violations critiques ou d'√©chec.
      - name: üì¨ Create Constitutional Issue if Needed
        # S'ex√©cute si une √©tape a √©chou√© OU si nos audits ont trouv√© des violations.
        if: failure() || steps.audit_step.outputs.critical_security_violations > 0 || steps.audit_step.outputs.line_violations > 0
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # R√©cup√©rer les outputs de l'√©tape de script pour un titre dynamique
          CRITICAL_VIOLATIONS=${{ steps.audit_step.outputs.critical_security_violations }}
          LINE_VIOLATIONS=${{ steps.audit_step.outputs.line_violations }}

          gh issue create \
            --title "üö® Audit Constitutionnel : $CRITICAL_VIOLATIONS violations critiques et $LINE_VIOLATIONS violations de longueur" \
            --body-file constitutional-report.md \
            --label "audit,critical-violation,needs-triage" \
            --assignee "@me" || echo "La cr√©ation de l'issue a √©chou√©."

      # √âtape 5: Sauvegarder les rapports g√©n√©r√©s comme artefacts.
      - name: üì§ Upload Constitutional Reports
        # S'ex√©cute toujours pour garantir que nous ayons les rapports, m√™me en cas d'√©chec.
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: constitutional-governance-report
          path: constitutional-report.md