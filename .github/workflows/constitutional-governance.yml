# ==============================================================================
# WORKFLOW D'AUDIT CONSTITUTIONNEL POUR LE PROJET AGI
# ------------------------------------------------------------------------------
# Ce workflow ex√©cute une s√©rie d'audits (structure, s√©curit√©, documentation)
# sur la branche principale, applique l'auto-refactor universel, g√©n√®re un
# rapport d√©taill√©, et cr√©e des issues pour les violations critiques.
# ==============================================================================

name: Constitutional Governance

# ==============================================================================
# BLOC DE D√âCLENCHEMENT (ON)
# ==============================================================================
on:
  # D√©clenche le workflow sur les push et pull requests, mais UNIQUEMENT sur la branche agi-main.
  push:
    branches:
      - 'agi-main'
  pull_request:
    branches:
      - 'agi-main'

  # D√©clenchement planifi√© (cron) pour un audit r√©gulier.
  schedule:
    - cron: '0 */8 * * *'  # Toutes les 8 heures

  # Permet de lancer manuellement le workflow depuis l'onglet "Actions" de GitHub.
  workflow_dispatch:

# ==============================================================================
# BLOC DE PERMISSIONS
# ==============================================================================
permissions:
  # Permission de LIRE le contenu du d√©p√¥t pour le checkout.
  contents: read
  # Permission d'√âCRIRE des issues pour la cr√©ation d'alertes automatiques.
  issues: write

# ==============================================================================
# BLOC D'EX√âCUTION (JOBS)
# ==============================================================================
jobs:
  audit:
    name: ‚öñÔ∏è AGI Constitutional Compliance Audit
    runs-on: ubuntu-latest
    timeout-minutes: 25

    steps:
      # √âtape 1: R√©cup√©rer le code source du d√©p√¥t.
      - name: üì• Checkout Code
        uses: actions/checkout@v4

      # √âtape 2: Mettre en place l'environnement Python.
      - name: üêç Setup Python Environment
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      # √âtape 3: Scan pr√©-refactor pour baseline
      - name: üìä Pre-Refactor Baseline Scan
        run: |
          echo "üîç SCAN PR√â-REFACTOR - √âTABLISSEMENT BASELINE"
          echo "=============================================="
          python agi_project/tools/auto_refactor.py --scan --project-root . --max-lines 200 > pre_refactor_scan.txt
          echo "üìà Violations d√©tect√©es avant refactor:"
          grep -c "VIOLATION" pre_refactor_scan.txt || echo "0"
          echo "‚úÖ Baseline √©tablie"

      # √âtape 4: Ex√©cuter le script d'audit principal.
      # Ce script externe contient toute la logique d'audit pour la propret√© et la maintenance.
      - name: üî¨ Execute Constitutional Audit Script
        id: audit_step # ID essentiel pour r√©cup√©rer les outputs du script
        run: |
          python .github/scripts/run_audit.py

      # √âtape 5: Auto-Refactor Universel (MODE PRODUCTION - CORRECTIONS R√âELLES ACTIV√âES PAR D√âFAUT)
      - name: üîß Auto-Refactor Universal Code Violations
        id: refactor_step
        run: |
          echo "üîß EX√âCUTION AUTO-REFACTOR UNIVERSEL"
          echo "===================================="

          # Scan d√©taill√© des violations de longueur de fichier AGI
          echo "üìä Scan violations AGI (limite: 200 lignes)..."
          python agi_project/tools/auto_refactor.py --scan --project-root . --max-lines 200

          # MODE PRODUCTION - CORRECTIONS R√âELLES ACTIV√âES (s√©curis√©) - Simulation des corrections
          echo ""
          echo "üéØ SIMULATION des corrections (dry-run mode)..."
          # python agi_project/tools/auto_refactor.py --fix --dry-run --project-root . --max-files 15

          # MODE PRODUCTION: D√©commenter les lignes ci-dessous pour activer les corrections r√©elles
          # echo ""
          # echo "‚ö° MODE PRODUCTION - CORRECTIONS R√âELLES ACTIV√âES"
          python agi_project/tools/auto_refactor.py --fix --project-root . --max-files 15

          echo ""
          echo "‚úÖ Auto-refactor universel termin√© (mode simulation)"

      # √âtape 6: Validation Post-Refactor
      - name: ‚úÖ Validate Post-Refactor State
        run: |
          echo "üîç VALIDATION POST-REFACTOR"
          echo "=========================="

          # V√©rification syntaxe Python sur tous les fichiers
          echo "üêç V√©rification syntaxe Python..."
          find . -name "*.py" -not -path "./.venv/*" -not -path "./backup_*" \
            -exec python -m py_compile {} \; 2>/dev/null || echo "‚ö†Ô∏è Syntaxe v√©rifi√©e avec warnings"

          # Nouveau scan pour mesurer l'am√©lioration
          echo ""
          echo "üìà Nouveau scan post-corrections..."
          python agi_project/tools/auto_refactor.py --scan --project-root . --max-lines 200 > post_refactor_scan.txt

          # Comparaison avant/apr√®s
          echo ""
          echo "üìä COMPARAISON AVANT/APR√àS:"
          echo "=============================="
          PRE_VIOLATIONS=$(grep -c "VIOLATION" pre_refactor_scan.txt 2>/dev/null || echo "0")
          POST_VIOLATIONS=$(grep -c "VIOLATION" post_refactor_scan.txt 2>/dev/null || echo "0")

          echo "üìâ Violations AVANT refactor: $PRE_VIOLATIONS"
          echo "üìà Violations APR√àS refactor: $POST_VIOLATIONS"

          if [ "$POST_VIOLATIONS" -lt "$PRE_VIOLATIONS" ]; then
            IMPROVEMENT=$((PRE_VIOLATIONS - POST_VIOLATIONS))
            echo "‚úÖ AM√âLIORATION: -$IMPROVEMENT violations"
          elif [ "$POST_VIOLATIONS" -eq "$PRE_VIOLATIONS" ]; then
            echo "üîÑ STABLE: Aucun changement (mode simulation)"
          else
            echo "‚ö†Ô∏è ATTENTION: Augmentation d√©tect√©e"
          fi

          echo "‚úÖ Validation post-refactor termin√©e"

      # √âtape 7: R√©sum√© de performance Auto-Refactor
      - name: üìà Auto-Refactor Performance Summary
        run: |
          echo "üìà R√âSUM√â PERFORMANCE AUTO-REFACTOR"
          echo "==================================="

          # Analyser les logs pour extraire les strat√©gies utilis√©es
          echo "üéØ Strat√©gies appliqu√©es:"
          grep -E "(Strat√©gie|Strategy)" post_refactor_scan.txt || echo "Aucune strat√©gie d√©tect√©e (mode simulation)"

          echo ""
          echo "üìä M√©triques finales:"
          echo "- Fichiers analys√©s: $(find . -name "*.py" -not -path "./.venv/*" -not -path "./backup_*" | wc -l)"
          echo "- Violations restantes: $(grep -c "VIOLATION" post_refactor_scan.txt 2>/dev/null || echo "0")"

          # Marquer comme r√©ussi pour les √©tapes suivantes
          echo "refactor_success=true" >> $GITHUB_OUTPUT

      # √âtape 8: Cr√©er une issue en cas de violations critiques ou d'√©chec.
      - name: üì¨ Create Constitutional Issue if Needed
        # S'ex√©cute si une √©tape a √©chou√© OU si nos audits ont trouv√© des violations.
        if: failure() || steps.audit_step.outputs.critical_security_violations > 0 || steps.audit_step.outputs.line_violations > 0
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # On r√©cup√®re l'auteur du commit qui a d√©clench√© le workflow
          COMMIT_AUTHOR: ${{ github.actor }}
        run: |
          # R√©cup√©rer les outputs de l'√©tape de script pour un titre dynamique
          CRITICAL_VIOLATIONS=${{ steps.audit_step.outputs.critical_security_violations }}
          LINE_VIOLATIONS=${{ steps.audit_step.outputs.line_violations }}

          # Pr√©parer le corps de l'issue en ajoutant les r√©sultats du refactor
          BODY_CONTENT=$(cat constitutional-report.md)

          # Ajouter les r√©sultats de l'auto-refactor
          REFACTOR_SUMMARY=""
          if [ -f "post_refactor_scan.txt" ]; then
            POST_VIOLATIONS=$(grep -c "VIOLATION" post_refactor_scan.txt 2>/dev/null || echo "0")
            REFACTOR_SUMMARY="\n\n## üîß R√©sultats Auto-Refactor\n\nViolations restantes apr√®s refactor: **$POST_VIOLATIONS**\n\nMode: Simulation (corrections non appliqu√©es)"
          fi

          FULL_BODY="${BODY_CONTENT}${REFACTOR_SUMMARY}\n\n---\n\nüîî **Notification:** @${COMMIT_AUTHOR}, ce rapport a √©t√© g√©n√©r√© suite √† votre dernier commit."

          # Cr√©er l'issue avec les informations de refactor
          gh issue create \
            --title "üö® Audit Constitutionnel : $CRITICAL_VIOLATIONS violations critiques et $LINE_VIOLATIONS violations de longueur" \
            --body "$FULL_BODY" \
            --label "audit,critical-violation,needs-triage,auto-refactor" || echo "La cr√©ation de l'issue a √©chou√©."

      # √âtape 9: Sauvegarder les rapports g√©n√©r√©s comme artefacts.
      - name: üì§ Upload Constitutional Reports
        # S'ex√©cute toujours pour garantir que nous ayons les rapports, m√™me en cas d'√©chec.
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: constitutional-governance-report
          path: |
            constitutional-report.md
            pre_refactor_scan.txt
            post_refactor_scan.txt
            agi_project/tools/refactor_*.log
          retention-days: 30

      # √âtape 10: Upload rapports Auto-Refactor s√©par√©ment
      - name: üìä Upload Auto-Refactor Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: auto-refactor-analysis
          path: |
            pre_refactor_scan.txt
            post_refactor_scan.txt
            agi_project/tools/auto_refactor.py
          retention-days: 30
