name:  Universe Simulation Engine Validation

on:
  push:
    paths: ['eve/simulation/**']
  pull_request:
    paths: ['eve/simulation/**']
  schedule:
    - cron: '0 6 * * *'

jobs:
  universe-validation:
    name: Universe Engine Tests
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install Simulation Dependencies
      run: |
        pip install numpy scipy matplotlib pandas
        pip install pymunk pygame evolutionary-algorithms
        pip install pytest-simulation pytest-performance
        
    - name: Test Universe Engine Core
      run: |
        cd eve/simulation/
        
        echo " TEST MOTEUR UNIVERS"
        python -c "
        try:
            from universe.universe_engine import UniverseEngine
            from universe.physics_core import PhysicsEngine
            
            # Initialiser univers
            universe = UniverseEngine()
            physics = PhysicsEngine()
            
            # Test simulation basique
            universe.initialize_simulation(particles=1000)
            physics.simulate_step(dt=0.1)
            
            print(' Universe Engine: Fonctionnel')
        except Exception as e:
            print(f' Universe Engine Error: {e}')
            raise
        "
        
    - name: Evolution Systems Test
      run: |
        cd eve/simulation/
        
        echo " TEST SYSTMES VOLUTION"
        python -c "
        try:
            from evolution.evolution_core import EvolutionEngine
            from evolution.genetic_algorithms import GeneticProcessor
            
            # Test volution
            evolution = EvolutionEngine()
            genetics = GeneticProcessor()
            
            # Simulation volutive
            population = evolution.create_population(size=100)
            evolved = genetics.evolve_generation(population)
            
            print(f' Evolution Engine: Population {len(evolved)} individus')
        except Exception as e:
            print(f' Evolution Engine Error: {e}')
            raise
        "
        
    - name: Physics Agents Validation
      run: |
        cd eve/simulation/
        
        echo " TEST AGENTS PHYSIQUES"
        python -c "
        try:
            from physics_agents.particle_agents import ParticleManager
            from physics_agents.stellar_chemistry import StellarEngine
            
            # Test agents physiques
            particles = ParticleManager()
            stellar = StellarEngine()
            
            particles.create_particle_system(count=500)
            stellar.simulate_stellar_formation()
            
            print(' Physics Agents: Simulation OK')
        except Exception as e:
            print(f' Physics Agents Error: {e}')
            raise
        "
        
    - name: Performance Simulation Test
      run: |
        cd eve/simulation/
        
        echo "TEST PERFORMANCE SIMULATION"
        python -c "
        import time
        import psutil
        
        start_time = time.time()
        start_memory = psutil.Process().memory_info().rss / 1024 / 1024
        
        # Test performance sur simulation complexe
        try:
            from universe.universe_engine import UniverseEngine
            universe = UniverseEngine()
            
            # Simulation intensive
            universe.initialize_simulation(particles=10000)
            for step in range(100):
                universe.simulate_step()
                if step % 20 == 0:
                    print(f'Step {step}/100 completed')
            
            end_time = time.time()
            end_memory = psutil.Process().memory_info().rss / 1024 / 1024
            
            print(f' Temps simulation: {end_time - start_time:.2f}s')
            print(f' Mmoire utilise: {end_memory - start_memory:.2f}MB')
            
            if end_time - start_time > 60:
                print(' WARNING: Simulation lente')
            else:
                print(' Performance simulation: Acceptable')
                
        except Exception as e:
            print(f' Performance Test Error: {e}')
        "
