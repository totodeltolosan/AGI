name:  Logs Management System

on:
  push:
    paths: ['eve/interfaces/logs/**', '**/*.py']
  schedule:
    - cron: '0 */3 * * *'  # Toutes les 3 heures
  workflow_dispatch:

jobs:
  logs-management:
    name: Advanced Logs System Validation
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Logging Environment
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install Logging Dependencies
      run: |
        pip install structlog
        pip install elasticsearch
        pip install log-analysis log-aggregation
        
    - name: Test EVE Logs Manager
      run: |
        echo "VALIDATION SYSTME LOGS EVE" > logs-report.md
        echo "==============================" >> logs-report.md
        echo "" >> logs-report.md
        
        # Analyser systme logs EVE
        if [ -d "eve/interfaces/logs" ]; then
          echo "## Systme Logs EVE" >> logs-report.md
          
          log_modules=$(find eve/interfaces/logs/ -name "*.py" | wc -l)
          echo "- **Modules logs**: $log_modules dtects" >> logs-report.md
          echo "" >> logs-report.md
          
          # Chercher gestionnaires logs spcialiss
          log_handlers=("file_handler" "console_handler" "database_handler" "network_handler")
          for handler in "${log_handlers[@]}"; do
            if find eve/interfaces/logs/ -name "*$handler*" -o -name "*${handler}*" | grep -q .; then
              echo "-  **$handler**: Dtect" >> logs-report.md
            else
              echo "-  **$handler**: Non trouv" >> logs-report.md
            fi
          done
          echo "" >> logs-report.md
        fi
        
    - name: Advanced Logging System Test
      run: |
        echo "## Test Systme Logging Avanc" >> logs-report.md
        echo "" >> logs-report.md
        
        # Test systme logging complet
        python -c "
        import logging
        import json
        import time
        from datetime import datetime
        
        print(' Test systme logging avanc...')
        
        # Configuration logging structur
        class StructuredFormatter(logging.Formatter):
            def format(self, record):
                log_entry = {
                    'timestamp': datetime.fromtimestamp(record.created).isoformat(),
                    'level': record.levelname,
                    'module': record.module,
                    'function': record.funcName,
                    'line': record.lineno,
                    'message': record.getMessage(),
                    'thread': record.thread,
                    'process': record.process
                }
                return json.dumps(log_entry, ensure_ascii=False)
        
        # Configurer loggers multiples
        loggers = {
            'agi.core': logging.getLogger('agi.core'),
            'eve.cognitive': logging.getLogger('eve.cognitive'),
            'eve.simulation': logging.getLogger('eve.simulation'),
            'eve.development': logging.getLogger('eve.development')
        }
        
        # Handlers multiples
        console_handler = logging.StreamHandler()
        console_handler.setFormatter(StructuredFormatter())
        
        file_handler = logging.FileHandler('agi_eve_system.log')
        file_handler.setFormatter(StructuredFormatter())
        
        # Configuration loggers
        for name, logger in loggers.items():
            logger.setLevel(logging.DEBUG)
            logger.addHandler(console_handler)
            logger.addHandler(file_handler)
        
        # Test logs structurs
        loggers['agi.core'].info('Systme AGI initialis', extra={'version': '1.0', 'mode': 'production'})
        loggers['eve.cognitive'].debug('Module cognitif activ', extra={'brain_status': 'active'})
        loggers['eve.simulation'].warning('Simulation charge leve', extra={'cpu_usage': 85})
        loggers['eve.development'].error('Erreur validation code', extra={'file': 'test.py', 'line': 42})
        
        print(' Logging structur: 4 loggers configurs')
        print(' Handlers: Console + File')
        print(' Format: JSON structur')
        
        # Test performance logging
        start_time = time.time()
        for i in range(1000):
            loggers['agi.core'].info(f'Message performance {i}')
        end_time = time.time()
        
        performance = 1000 / (end_time - start_time)
        print(f' Performance: {performance:.0f} logs/sec')
        
        if performance > 500:
            print(' Performance logging: Excellente')
        else:
            print(' Performance logging:  optimiser')
        " >> logs-report.md
        
    - name: Log Analysis and Monitoring
      run: |
        echo "" >> logs-report.md
        echo "## Analyse et Monitoring Logs" >> logs-report.md
        echo "" >> logs-report.md
        
        # Analyser logs systme
        python -c "
        import re
        import json
        from collections import Counter, defaultdict
        from datetime import datetime
        
        print(' Analyse logs systme...')
        
        # Lire et analyser logs existants
        log_stats = {
            'total_entries': 0,
            'levels': Counter(),
            'modules': Counter(),
            'errors': [],
            'warnings': [],
            'timeline': defaultdict(int)
        }
        
        try:
            with open('agi_eve_system.log', 'r') as f:
                for line in f:
                    try:
                        log_entry = json.loads(line.strip())
                        log_stats['total_entries'] += 1
                        log_stats['levels'][log_entry['level']] += 1
                        log_stats['modules'][log_entry['module']] += 1
                        
                        # Extraire heure pour timeline
                        timestamp = log_entry['timestamp']
                        hour = timestamp.split('T')[1][:2]
                        log_stats['timeline'][hour] += 1
                        
                        # Collecter erreurs et warnings
                        if log_entry['level'] == 'ERROR':
                            log_stats['errors'].append(log_entry['message'])
                        elif log_entry['level'] == 'WARNING':
                            log_stats['warnings'].append(log_entry['message'])
                            
                    except json.JSONDecodeError:
                        pass  # Ignorer lignes non-JSON
                        
        except FileNotFoundError:
            print(' Fichier log non trouv - Gnrer logs d\\'abord')
        
        # Afficher statistiques
        print(f'- **Total entres**: {log_stats[\"total_entries\"]}')
        
        if log_stats['levels']:
            for level, count in log_stats['levels'].most_common():
                print(f'- **{level}**: {count} entres')
        
        if log_stats['modules']:
            print('- **Modules les plus actifs**:')
            for module, count in log_stats['modules'].most_common(3):
                print(f'  - {module}: {count}')
        
        # Alertes
        error_count = log_stats['levels']['ERROR']
        warning_count = log_stats['levels']['WARNING']
        
        if error_count > 10:
            print(f' **ALERTE**: {error_count} erreurs dtectes')
        elif warning_count > 50:
            print(f' **ATTENTION**: {warning_count} warnings')
        else:
            print(' **Logs**: Niveau normal')
        
        # Recommandations
        total = log_stats['total_entries']
        if total > 10000:
            print(' **Recommandation**: Rotation logs ncessaire')
        if error_count / max(total, 1) > 0.1:
            print(' **Recommandation**: Taux d\\'erreur lev - Investigation requise')
        " >> logs-report.md
        
    - name: Log Aggregation and Alerting
      run: |
        echo "" >> logs-report.md
        echo "## Agrgation et Alertes Logs" >> logs-report.md
        echo "" >> logs-report.md
        
        # Systme d'alertes bas sur logs
        python -c "
        import json
        import re
        from datetime import datetime, timedelta
        
        print(' Test systme alertes logs...')
        
        class LogAlertSystem:
            def __init__(self):
                self.rules = [
                    {'pattern': r'ERROR', 'threshold': 5, 'window': 300, 'severity': 'high'},
                    {'pattern': r'WARNING.*memory', 'threshold': 10, 'window': 600, 'severity': 'medium'},
                    {'pattern': r'CRITICAL', 'threshold': 1, 'window': 60, 'severity': 'critical'},
                    {'pattern': r'exception|traceback', 'threshold': 3, 'window': 300, 'severity': 'high'}
                ]
                self.alerts = []
            
            def check_alerts(self, log_entries):
                for rule in self.rules:
                    pattern = rule['pattern']
                    threshold = rule['threshold']
                    severity = rule['severity']
                    
                    # Compter occurrences
                    matches = [entry for entry in log_entries if re.search(pattern, entry, re.IGNORECASE)]
                    
                    if len(matches) >= threshold:
                        alert = {
                            'rule': pattern,
                            'count': len(matches),
                            'threshold': threshold,
                            'severity': severity,
                            'timestamp': datetime.now().isoformat()
                        }
                        self.alerts.append(alert)
                
                return self.alerts
        
        # Test systme alertes
        alert_system = LogAlertSystem()
        
        # Logs test pour dclencher alertes
        test_logs = [
            'ERROR: Database connection failed',
            'ERROR: Authentication error',
            'ERROR: File not found',
            'ERROR: Network timeout',
            'ERROR: Permission denied',
            'ERROR: Critical system failure',
            'WARNING: High memory usage detected',
            'WARNING: Memory leak suspected',
            'CRITICAL: System shutdown imminent',
            'Exception in thread main: NullPointerException'
        ]
        
        alerts = alert_system.check_alerts(test_logs)
        
        print(f' Systme alertes: {len(alerts)} alertes gnres')
        
        for alert in alerts:
            severity_icon = {'low': '', 'medium': '', 'high': '', 'critical': ''}
            icon = severity_icon.get(alert['severity'], '')
            print(f'{icon} **{alert[\"severity\"].upper()}**: {alert[\"rule\"]} - {alert[\"count\"]} occurrences')
        
        # Test notification systme
        if any(alert['severity'] == 'critical' for alert in alerts):
            print(' **ALERTE CRITIQUE**: Notification immdiate requise')
        elif any(alert['severity'] == 'high' for alert in alerts):
            print(' **ALERTE HAUTE**: Intervention rapide recommande')
        else:
            print(' **Systme stable**: Aucune alerte critique')
        " >> logs-report.md
        
    - name: Upload Logs Management Report
      uses: actions/upload-artifact@v4
      with:
        name: logs-management-report
        path: |
          logs-report.md
          agi_eve_system.log
