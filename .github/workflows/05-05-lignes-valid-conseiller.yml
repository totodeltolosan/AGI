name: "Qualiticien : Validation Conseiller Lignes"

on:
  workflow_call:
    inputs:
      artefact_recommandations:
        description: "Nom de l'artefact Markdown contenant les recommandations"
        required: true
        type: string
      taille_minimale:
        description: "Taille minimale attendue en octets"
        required: false
        default: 50
        type: number
    outputs:
      validation_success:
        description: "R√©sultat de la validation (true/false)"
        value: ${{ jobs.validate_conseiller.outputs.success }}
      validation_errors:
        description: "Nombre d'erreurs de validation d√©tect√©es"
        value: ${{ jobs.validate_conseiller.outputs.error_count }}

jobs:
  validate_conseiller:
    name: "Validation artefact recommandations Markdown"
    runs-on: ubuntu-latest
    outputs:
      success: ${{ steps.validate.outputs.validation_success }}
      error_count: ${{ steps.validate.outputs.error_count }}
    
    steps:
      - name: "Checkout du code"
        uses: actions/checkout@v4
      
      - name: "Configuration Python 3.11"
        uses: actions/setup-python@v6
        with:
          python-version: '3.11'
      
      - name: "T√©l√©chargement de l'artefact √† valider"
        uses: actions/download-artifact@v3
        with:
          name: ${{ inputs.artefact_recommandations }}
          path: ./validation-input/
      
      - name: "Ex√©cution de la validation de l'artefact Markdown"
        id: validate
        run: |
          echo "üîç Validation de l'artefact Markdown recommandations"
          
          if python .github/scripts/qualiticien_validation_artefact.py \
            --artefact "./validation-input/${{ inputs.artefact_recommandations }}" \
            --type-attendu "markdown" \
            --taille-min ${{ inputs.taille_minimale }} \
            --lignes-min 3; then
            
            echo "validation_success=true" >> $GITHUB_OUTPUT
            echo "error_count=0" >> $GITHUB_OUTPUT
            echo "‚úÖ VALIDATION R√âUSSIE"
          else
            echo "validation_success=false" >> $GITHUB_OUTPUT
            echo "error_count=1" >> $GITHUB_OUTPUT
            echo "‚ùå VALIDATION √âCHOU√âE"
            exit 1
          fi
      
      - name: "Validation sp√©cifique du contenu recommandations"
        if: steps.validate.outputs.validation_success == 'true'
        run: |
          echo "üìù Validation du contenu sp√©cifique des recommandations"
          
          # V√©rification du contenu des recommandations
          python -c "import re; import sys; ; try:; with open('./validation-input/${{ inputs.artefact_recommandations }}', 'r', encoding='utf-8') as f:; content = f.read(); ; if not content.strip():; print('‚ùå ERREUR: Fichier de recommandations vide'); sys.exit(1); ; lines = content.split('\n'); print(f'üìä Lignes totales: {len(lines)}'); ; # Recherche d'√©l√©ments caract√©ristiques d'un rapport de recommandations; indicators = {; 'headers': len(re.findall(r'^#+\s', content, re.MULTILINE)),; 'lists': len(re.findall(r'^\s*[-*+]\s', content, re.MULTILINE)),; 'numbered_lists': len(re.findall(r'^\s*\d+\.\s', content, re.MULTILINE)),; 'recommendations': len(re.findall(r'recommand|conseil|suggest|am√©liorer|corriger', content, re.IGNORECASE)),; 'priorities': len(re.findall(r'priorit√©|urgent|important|critique|faible', content, re.IGNORECASE)),; 'actions': len(re.findall(r'action|√©tape|mesure|impl√©menter', content, re.IGNORECASE)); }; ; print(f'üîç √âl√©ments d√©tect√©s:'); for key, count in indicators.items():; print(f'   ‚Ä¢ {key}: {count}'); ; # Validation de la structure attendue; warnings = []; ; if indicators['headers'] == 0:; warnings.append('Aucun titre d√©tect√© (# Titre)'); ; if indicators['recommendations'] == 0:; warnings.append('Aucun terme de recommandation d√©tect√©'); ; if indicators['lists'] + indicators['numbered_lists'] == 0:; warnings.append('Aucune liste d√©tect√©e (structure peu organis√©e)'); ; if warnings:; print('‚ö†Ô∏è  Avertissements de structure:'); for warning in warnings:; print(f'   ‚Ä¢ {warning}'); print('‚ÑπÔ∏è  Ces avertissements ne bloquent pas la validation'); else:; print('‚úÖ Structure des recommandations conforme'); ; # Calcul de quelques m√©triques; word_count = len(content.split()); char_count = len(content); ; print(f'üìà M√©triques du rapport:'); print(f'   ‚Ä¢ Mots: {word_count}'); print(f'   ‚Ä¢ Caract√®res: {char_count}'); ; if word_count < 20:; print('‚ö†Ô∏è  Rapport tr√®s court (< 20 mots)'); elif word_count > 1000:; print('üìö Rapport d√©taill√© (> 1000 mots)'); else:; print('‚úÖ Taille de rapport appropri√©e'); ; except Exception as e:; print(f'‚ö†Ô∏è  Erreur validation contenu recommandations: {e}'); "
          echo "‚úÖ Validation contenu recommandations termin√©e"
