#!/usr/bin/env python3
"""
Nettoyeur : Formateur Statut
Poste un "check" de statut sur le commit GitHub avec la couleur et le message appropri√©s.
"""

import argparse
import json
import os
import sys
import subprocess
import requests
from datetime import datetime


class StatutFormatter:
    def __init__(self):
        """Initialise le formateur de statut avec les arguments de ligne de commande."""
        parser = argparse.ArgumentParser(description='Poste un check de statut sur GitHub')
        parser.add_argument('--resultat', required=True, choices=['true', 'false'],
                          help='R√©sultat du check (true/false)')
        parser.add_argument('--message-succes', required=True,
                          help='Message √† afficher en cas de succ√®s')
        parser.add_argument('--message-echec', required=True,
                          help='Message √† afficher en cas d\'√©chec')
        parser.add_argument('--nom-check', required=True,
                          help='Nom du check √† cr√©er (ex: "AGI-Gouvernance/Audit-Lignes")')
        
        self.args = parser.parse_args()
        self.resultat_bool = self.args.resultat.lower() == 'true'
        
        # R√©cup√©ration des variables d'environnement GitHub
        self.github_token = os.getenv('GITHUB_TOKEN')
        self.github_repo = os.getenv('GITHUB_REPOSITORY')
        self.github_sha = os.getenv('GITHUB_SHA')
        
        if not all([self.github_token, self.github_repo, self.github_sha]):
            print("‚ùå ERREUR: Variables d'environnement GitHub manquantes", file=sys.stderr)
            print("Requis: GITHUB_TOKEN, GITHUB_REPOSITORY, GITHUB_SHA", file=sys.stderr)
            sys.exit(1)
    
    def run(self):
        """
        Logique principale : d√©termine le statut √† poster selon le r√©sultat
        et utilise l'API GitHub pour cr√©er le check de statut.
        """
        try:
            # D√©termination des param√®tres du check selon le r√©sultat
            if self.resultat_bool:
                conclusion = "success"
                message = self.args.message_succes
                emoji = "‚úÖ"
                title = f"{emoji} Check R√©ussi"
            else:
                conclusion = "failure"
                message = self.args.message_echec
                emoji = "‚ùå"
                title = f"{emoji} Check √âchou√©"
            
            print(f"{emoji} Cr√©ation du check '{self.args.nom_check}' avec conclusion: {conclusion}")
            
            # Tentative avec l'API GitHub (m√©thode pr√©f√©r√©e)
            success = self._create_check_via_api(conclusion, title, message)
            
            if not success:
                print("‚ö†Ô∏è  API GitHub indisponible, utilisation du commit status en fallback")
                self._create_status_via_cli(conclusion, message)
            
            print(f"‚úÖ Check de statut '{self.args.nom_check}' cr√©√© avec succ√®s")
            
        except Exception as e:
            print(f"‚ùå ERREUR lors de la cr√©ation du check de statut : {e}", file=sys.stderr)
            sys.exit(1)
    
    def _create_check_via_api(self, conclusion, title, message):
        """
        Cr√©e un check run via l'API GitHub (m√©thode recommand√©e).
        """
        try:
            url = f"https://api.github.com/repos/{self.github_repo}/check-runs"
            
            payload = {
                "name": self.args.nom_check,
                "head_sha": self.github_sha,
                "status": "completed",
                "conclusion": conclusion,
                "started_at": datetime.utcnow().isoformat() + "Z",
                "completed_at": datetime.utcnow().isoformat() + "Z",
                "output": {
                    "title": title,
                    "summary": message,
                    "text": f"Check effectu√© le {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n{message}"
                }
            }
            
            headers = {
                "Authorization": f"token {self.github_token}",
                "Accept": "application/vnd.github.v3+json",
                "Content-Type": "application/json"
            }
            
            response = requests.post(url, json=payload, headers=headers, timeout=30)
            
            if response.status_code == 201:
                check_data = response.json()
                print(f"üîó Check cr√©√© avec ID: {check_data.get('id')}")
                print(f"üåê URL: {check_data.get('html_url', 'N/A')}")
                return True
            else:
                print(f"‚ö†Ô∏è  R√©ponse API: {response.status_code} - {response.text}")
                return False
                
        except requests.exceptions.RequestException as e:
            print(f"‚ö†Ô∏è  Erreur r√©seau API GitHub: {e}")
            return False
        except Exception as e:
            print(f"‚ö†Ô∏è  Erreur cr√©ation check API: {e}")
            return False
    
    def _create_status_via_cli(self, conclusion, message):
        """
        Cr√©e un commit status via GitHub CLI en fallback.
        """
        try:
            # Mapping des conclusions pour commit status
            state_mapping = {
                "success": "success",
                "failure": "failure",
                "error": "error"
            }
            
            state = state_mapping.get(conclusion, "error")
            
            cmd = [
                "gh", "api",
                f"repos/{self.github_repo}/statuses/{self.github_sha}",
                "-f", f"state={state}",
                "-f", f"description={message}",
                "-f", f"context={self.args.nom_check}"
            ]
            
            result = subprocess.run(cmd, capture_output=True, text=True, timeout=30)
            
            if result.returncode == 0:
                print("üîÑ Commit status cr√©√© via GitHub CLI")
                return True
            else:
                print(f"‚ö†Ô∏è  Erreur GitHub CLI: {result.stderr}")
                # Essayer une approche encore plus simple
                return self._create_simple_output(conclusion, message)
                
        except subprocess.TimeoutExpired:
            print("‚ö†Ô∏è  Timeout GitHub CLI")
            return False
        except Exception as e:
            print(f"‚ö†Ô∏è  Erreur GitHub CLI: {e}")
            return False
    
    def _create_simple_output(self, conclusion, message):
        """
        En dernier recours, √©crit le statut dans les outputs GitHub Actions.
        """
        try:
            # √âcriture dans GITHUB_STEP_SUMMARY pour affichage dans l'interface
            summary_content = f"""
## {self.args.nom_check}

**R√©sultat:** {"‚úÖ Succ√®s" if conclusion == "success" else "‚ùå √âchec"}

**Message:** {message}

**Timestamp:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
"""
            
            if 'GITHUB_STEP_SUMMARY' in os.environ:
                with open(os.environ['GITHUB_STEP_SUMMARY'], 'a', encoding='utf-8') as f:
                    f.write(summary_content)
                print("üìÑ Statut √©crit dans GITHUB_STEP_SUMMARY")
            
            # √âcriture dans les outputs
            if 'GITHUB_OUTPUT' in os.environ:
                with open(os.environ['GITHUB_OUTPUT'], 'a', encoding='utf-8') as f:
                    f.write(f"check_result={conclusion}\n")
                    f.write(f"check_message={message}\n")
                    f.write(f"check_name={self.args.nom_check}\n")
                print("üì§ Statut √©crit dans GITHUB_OUTPUT")
            
            return True
            
        except Exception as e:
            print(f"‚ö†Ô∏è  Erreur cr√©ation output simple: {e}")
            return False


if __name__ == "__main__":
    formatter = StatutFormatter()
    formatter.run()
