name: üè≠ Code Generation Validation

on:
  push:
    paths: ['eve/development/automation/**', 'tools/**']
  pull_request:
    paths: ['tools/**']
  workflow_dispatch:

jobs:
  code-generation:
    name: Validate Code Generation Systems
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Code Generation Environment
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install Code Generation Tools
      run: |
        pip install jinja2 ast-tools code-generators
        pip install template-engines meta-programming
        pip install pytest-generation test-automation
        
    - name: Test AGI Code Generation Tools
      run: |
        echo "üè≠ VALIDATION G√âN√âRATION CODE" > codegen-report.md
        echo "=============================" >> codegen-report.md
        echo "" >> codegen-report.md
        
        # Analyser outils g√©n√©ration existants
        if [ -d "tools" ]; then
          echo "## üõ†Ô∏è Outils G√©n√©ration Existants" >> codegen-report.md
          
          # Chercher g√©n√©rateurs
          generators=$(find tools/ -name "*generator*" -name "*.py" | wc -l)
          templates=$(find tools/ -name "*template*" -name "*.py" | wc -l)
          
          echo "- **G√©n√©rateurs d√©tect√©s**: $generators" >> codegen-report.md
          echo "- **Templates d√©tect√©s**: $templates" >> codegen-report.md
          echo "" >> codegen-report.md
          
          # Lister g√©n√©rateurs principaux
          echo "### G√©n√©rateurs Principaux" >> codegen-report.md
          find tools/ -name "*generator*.py" | head -10 | while read gen; do
            lines=$(wc -l < "$gen")
            echo "- \`$gen\`: $lines lignes" >> codegen-report.md
          done
          echo "" >> codegen-report.md
        fi
        
    - name: Test Code Generation Pipeline
      run: |
        echo "## üîÑ Pipeline G√©n√©ration" >> codegen-report.md
        echo "" >> codegen-report.md
        
        # Test g√©n√©ration code basique
        python -c "
        import os
        import sys
        
        print('üè≠ Test g√©n√©ration code automatique...')
        
        # Template basique
        template_code = '''
def {function_name}({parameters}):
    \"\"\"{docstring}\"\"\"
    {body}
    return {return_value}
'''
        
        # Donn√©es test
        functions = [
            {
                'function_name': 'process_data',
                'parameters': 'data, options=None',
                'docstring': 'Process input data with options',
                'body': 'processed = data.transform()\\n    if options:\\n        processed = processed.filter(options)',
                'return_value': 'processed'
            },
            {
                'function_name': 'validate_input',
                'parameters': 'input_data',
                'docstring': 'Validate input data format',
                'body': 'if not input_data:\\n        raise ValueError(\"Empty input\")\\n    validation_result = check_format(input_data)',
                'return_value': 'validation_result'
            }
        ]
        
        # G√©n√©rer code
        generated_code = []
        for func_data in functions:
            generated = template_code.format(**func_data)
            generated_code.append(generated)
        
        # Sauvegarder code g√©n√©r√©
        with open('generated_functions.py', 'w') as f:
            f.write('# Code g√©n√©r√© automatiquement\\n\\n')
            f.write('\\n\\n'.join(generated_code))
        
        print('‚úÖ G√©n√©ration code: 2 fonctions g√©n√©r√©es')
        
        # Valider syntaxe code g√©n√©r√©
        import ast
        try:
            with open('generated_functions.py', 'r') as f:
                ast.parse(f.read())
            print('‚úÖ Validation syntaxe: OK')
        except SyntaxError as e:
            print(f'‚ùå Erreur syntaxe: {e}')
        
        print('‚úÖ Pipeline g√©n√©ration: Fonctionnel')
        " >> codegen-report.md
        
    - name: Template System Validation
      run: |
        echo "" >> codegen-report.md
        echo "## üìÑ Validation Syst√®me Templates" >> codegen-report.md
        
        # Test syst√®me templates
        python -c "
        from string import Template
        import os
        
        print('üìÑ Test syst√®me templates...')
        
        # Template classe AGI conforme
        class_template = Template('''#!/usr/bin/env python3
# -*- coding: utf-8 -*-
\"\"\"
$class_name - Module $description
Respecte la constitution AGI: limite 200 lignes, documentation compl√®te
\"\"\"

class $class_name:
    \"\"\"$class_description\"\"\"
    
    def __init__(self):
        \"\"\"Initialise $class_name\"\"\"
        self.initialized = True
    
    def $main_method(self, $parameters):
        \"\"\"$method_description\"\"\"
        # Impl√©mentation conforme AGI
        result = self._process_$operation($parameters)
        return result
    
    def _process_$operation(self, data):
        \"\"\"Traitement interne pour $operation\"\"\"
        # Logique m√©tier
        processed_data = data
        return processed_data
''')
        
        # Donn√©es test classes
        classes_data = [
            {
                'class_name': 'DataProcessor',
                'description': 'traitement de donn√©es',
                'class_description': 'Processeur de donn√©es AGI-conforme',
                'main_method': 'process',
                'parameters': 'data',
                'method_description': 'Traite les donn√©es d\\'entr√©e',
                'operation': 'data'
            },
            {
                'class_name': 'ConfigValidator', 
                'description': 'validation configuration',
                'class_description': 'Validateur de configuration AGI',
                'main_method': 'validate',
                'parameters': 'config',
                'method_description': 'Valide la configuration fournie',
                'operation': 'config'
            }
        ]
        
        # G√©n√©rer classes
        for class_data in classes_data:
            generated_class = class_template.substitute(class_data)
            filename = f'{class_data[\"class_name\"].lower()}.py'
            
            with open(filename, 'w') as f:
                f.write(generated_class)
            
            # V√©rifier conformit√© (limite 200 lignes)
            lines = len(generated_class.split('\\n'))
            print(f'- **{class_data[\"class_name\"]}**: {lines} lignes', end='')
            
            if lines <= 200:
                print(' ‚úÖ Conforme AGI')
            else:
                print(' ‚ö†Ô∏è D√©passe limite AGI')
        
        print('‚úÖ Syst√®me templates: Fonctionnel')
        " >> codegen-report.md
        
    - name: AGI Compliance Code Generation
      run: |
        echo "" >> codegen-report.md
        echo "## üìã G√©n√©ration Code Conforme AGI" >> codegen-report.md
        
        # Test g√©n√©ration conforme constitution AGI
        python -c "
        import os
        import ast
        
        print('üìã Test g√©n√©ration conforme AGI...')
        
        # G√©n√©rateur module AGI conforme
        def generate_agi_module(module_name, functions):
            header = f'''#!/usr/bin/env python3
# -*- coding: utf-8 -*-
\\\"\\\"\\\"
{module_name} - Module AGI Conforme
Respecte les 56 lois constitutionnelles AGI
Limite: 200 lignes maximum
\\\"\\\"\\\"

import logging
from typing import Any, Optional

logger = logging.getLogger(__name__)

'''
            
            function_templates = []
            for func in functions:
                func_code = f'''
def {func['name']}({func['params']}) -> {func['return_type']}:
    \\\"\\\"\\\"
    {func['docstring']}
    
    Args:
        {func['args_doc']}
    
    Returns:
        {func['return_doc']}
    \\\"\\\"\\\"
    logger.debug(f\"Executing {func['name']} with params: {{locals()}}\")
    
    try:
        {func['implementation']}
        return result
    except Exception as e:
        logger.error(f\"Error in {func['name']}: {{e}}\")
        raise

'''
                function_templates.append(func_code)
            
            # Assembler module
            module_code = header + ''.join(function_templates)
            
            # Ajouter footer AGI
            footer = '''
if __name__ == \"__main__\":
    # Module conforme AGI - Tests unitaires
    pass
'''
            module_code += footer
            
            return module_code
        
        # D√©finir modules test
        test_modules = [
            {
                'name': 'data_processor_agi',
                'functions': [
                    {
                        'name': 'process_data',
                        'params': 'data: Any, validate: bool = True',
                        'return_type': 'Any',
                        'docstring': 'Traite les donn√©es selon standards AGI',
                        'args_doc': 'data: Donn√©es √† traiter\\n        validate: Activer validation',
                        'return_doc': 'Donn√©es trait√©es et valid√©es',
                        'implementation': '''if validate:\\n        _validate_data(data)\\n    result = _transform_data(data)'''
                    }
                ]
            }
        ]
        
        # G√©n√©rer et valider modules
        for module_data in test_modules:
            module_code = generate_agi_module(module_data['name'], module_data['functions'])
            filename = f'{module_data[\"name\"]}.py'
            
            with open(filename, 'w') as f:
                f.write(module_code)
            
            # Validation conformit√©
            lines = len(module_code.split('\\n'))
            print(f'- **{module_data[\"name\"]}**: {lines} lignes', end='')
            
            # V√©rifier syntaxe
            try:
                ast.parse(module_code)
                syntax_ok = True
            except:
                syntax_ok = False
            
            if lines <= 200 and syntax_ok:
                print(' ‚úÖ Conforme AGI + Syntaxe OK')
            elif lines <= 200:
                print(' ‚ö†Ô∏è Conforme AGI mais erreur syntaxe')
            else:
                print(' ‚ùå Non conforme AGI (trop de lignes)')
        
        print('‚úÖ G√©n√©ration conforme AGI: Valid√©e')
        " >> codegen-report.md
        
    - name: Upload Generated Code Examples
      uses: actions/upload-artifact@v3
      with:
        name: code-generation-examples
        path: |
          codegen-report.md
          generated_functions.py
          dataprocessor.py
          configvalidator.py
          data_processor_agi.py
