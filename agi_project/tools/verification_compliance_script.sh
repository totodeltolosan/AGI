#!/bin/bash
# Script de V√©rification de Conformit√© AGI - Version Corrig√©e
# Ex√©cute l'ensemble des outils de validation de base sur le projet AGI
#
# Usage:
#   ./verification_compliance_script.sh
#   ./verification_compliance_script.sh --target /path/to/project
#   ./verification_compliance_script.sh --full-audit

set -e  # Arr√™t du script en cas d'erreur

# Configuration par d√©faut
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT=""
TARGET_DIR=""
FULL_AUDIT=false
VERBOSE=false
OUTPUT_DIR=""

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m' # No Color

# Fonction d'affichage avec couleurs
log_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

log_header() {
    echo -e "${PURPLE}üèõÔ∏è  $1${NC}"
}

# Fonction d'aide
show_help() {
    cat << EOF
Script de V√©rification de Conformit√© AGI

USAGE:
    $0 [OPTIONS]

OPTIONS:
    --target DIR        R√©pertoire √† analyser (d√©faut: auto-d√©tection)
    --full-audit        Ex√©cute l'audit constitutionnel complet
    --output DIR        R√©pertoire de sortie pour les rapports
    --verbose           Mode verbeux
    --help              Affiche cette aide

EXEMPLES:
    $0                                          # V√©rification standard
    $0 --target ./tools/project_initializer/    # Cible sp√©cifique
    $0 --full-audit --output ./reports/         # Audit complet avec rapports

DESCRIPTION:
    Ce script coordonne l'ex√©cution de tous les outils de validation AGI:
    1. V√©rification rapide des lignes (quick_check_lines.py)
    2. Audit constitutionnel complet (full_audit.py) si demand√©
    3. G√©n√©ration de rapports de synth√®se

EOF
}

# Fonction de d√©tection de la racine du projet
find_project_root() {
    local current_dir="$PWD"

    # Recherche AGI.md ou structure tools/project_initializer
    while [[ "$current_dir" != "/" ]]; do
        if [[ -f "$current_dir/AGI.md" ]] || [[ -d "$current_dir/tools/project_initializer" ]]; then
            echo "$current_dir"
            return 0
        fi
        current_dir="$(dirname "$current_dir")"
    done

    # Si pas trouv√©, utilise le r√©pertoire courant
    echo "$PWD"
}

# Fonction de validation de l'environnement
check_environment() {
    log_info "V√©rification de l'environnement..."

    # V√©rification Python
    if ! command -v python3 &> /dev/null; then
        log_error "Python 3 n'est pas install√© ou accessible"
        exit 1
    fi

    local python_version=$(python3 -c "import sys; print(f'{sys.version_info.major}.{sys.version_info.minor}')")
    log_success "Python $python_version d√©tect√©"

    # V√©rification de la racine du projet
    if [[ -z "$PROJECT_ROOT" ]]; then
        PROJECT_ROOT=$(find_project_root)
        log_info "Racine du projet d√©tect√©e: $PROJECT_ROOT"
    fi

    # D√©finition du r√©pertoire cible par d√©faut
    if [[ -z "$TARGET_DIR" ]]; then
        if [[ -d "$PROJECT_ROOT/tools/project_initializer" ]]; then
            TARGET_DIR="$PROJECT_ROOT/tools/project_initializer"
        else
            TARGET_DIR="$PROJECT_ROOT"
        fi
        log_info "R√©pertoire cible: $TARGET_DIR"
    fi

    # V√©rification de l'existence du r√©pertoire cible
    if [[ ! -d "$TARGET_DIR" ]]; then
        log_error "R√©pertoire cible inexistant: $TARGET_DIR"
        exit 1
    fi

    # Cr√©ation du r√©pertoire de sortie si n√©cessaire
    if [[ -n "$OUTPUT_DIR" ]]; then
        mkdir -p "$OUTPUT_DIR"
        log_success "R√©pertoire de sortie pr√©par√©: $OUTPUT_DIR"
    fi
}

# Fonction de v√©rification rapide des lignes
run_quick_check() {
    log_header "√âTAPE 1: V√©rification Rapide des 200 Lignes"
    echo "=================================================="

    local quick_check_script="$PROJECT_ROOT/tools/compliance_checker/quick_check_lines.py"
    local csv_output=""

    # Pr√©paration de la sortie CSV
    if [[ -n "$OUTPUT_DIR" ]]; then
        csv_output="$OUTPUT_DIR/quick_check_$(date +%Y%m%d_%H%M%S).csv"
    fi

    # Construction de la commande
    local cmd="python3 $quick_check_script --target $TARGET_DIR"
    if [[ -n "$csv_output" ]]; then
        cmd="$cmd --csv $csv_output"
    fi

    log_info "Ex√©cution: $cmd"

    # Ex√©cution et capture du code de retour
    set +e
    if [[ "$VERBOSE" == "true" ]]; then
        eval "$cmd"
    else
        eval "$cmd" 2>/dev/null
    fi
    local quick_check_result=$?
    set -e

    # Analyse du r√©sultat
    if [[ $quick_check_result -eq 0 ]]; then
        log_success "V√©rification rapide: CONFORME"
        return 0
    else
        log_warning "V√©rification rapide: VIOLATIONS D√âTECT√âES"
        return 1
    fi
}

# Fonction d'audit constitutionnel complet
run_full_audit() {
    log_header "√âTAPE 2: Audit Constitutionnel Complet"
    echo "======================================"

    local full_audit_script="$PROJECT_ROOT/tools/compliance_checker/full_audit.py"

    # V√©rification de l'existence du script
    if [[ ! -f "$full_audit_script" ]]; then
        log_error "Script d'audit complet non trouv√©: $full_audit_script"
        return 1
    fi

    # Pr√©paration des fichiers de sortie
    local json_output=""
    local console_output=""

    if [[ -n "$OUTPUT_DIR" ]]; then
        json_output="$OUTPUT_DIR/full_audit_$(date +%Y%m%d_%H%M%S).json"
        console_output="$OUTPUT_DIR/full_audit_$(date +%Y%m%d_%H%M%S).txt"
    fi

    # Construction de la commande
    local cmd="python3 $full_audit_script --target $TARGET_DIR"
    if [[ "$VERBOSE" == "true" ]]; then
        cmd="$cmd --verbose"
    fi

    log_info "Ex√©cution de l'audit constitutionnel complet..."

    # Ex√©cution et capture
    set +e
    if [[ -n "$console_output" ]]; then
        eval "$cmd" | tee "$console_output"
        local audit_result=${PIPESTATUS[0]}
    else
        eval "$cmd"
        local audit_result=$?
    fi

    # G√©n√©ration du rapport JSON si demand√©
    if [[ -n "$json_output" ]]; then
        local json_cmd="python3 $full_audit_script --target $TARGET_DIR --format json --output $json_output"
        eval "$json_cmd" >/dev/null 2>&1
        log_success "Rapport JSON g√©n√©r√©: $json_output"
    fi

    set -e

    # Analyse du r√©sultat
    if [[ $audit_result -eq 0 ]]; then
        log_success "Audit complet: CONFORME √Ä LA CONSTITUTION"
        return 0
    else
        log_warning "Audit complet: NON-CONFORMIT√âS D√âTECT√âES"
        return 1
    fi
}

# Fonction de g√©n√©ration du rapport de synth√®se
generate_synthesis_report() {
    log_header "√âTAPE 3: G√©n√©ration du Rapport de Synth√®se"
    echo "============================================="

    local synthesis_file="$OUTPUT_DIR/synthesis_report_$(date +%Y%m%d_%H%M%S).md"

    if [[ -z "$OUTPUT_DIR" ]]; then
        log_info "Pas de r√©pertoire de sortie sp√©cifi√©, rapport affich√© uniquement"
        return 0
    fi

    # Cr√©ation du rapport de synth√®se
    cat > "$synthesis_file" << EOF
# Rapport de Synth√®se - V√©rification de Conformit√© AGI

**Date:** $(date '+%d/%m/%Y √† %H:%M:%S')
**Projet:** G√©n√©rateur AGI
**R√©pertoire analys√©:** $TARGET_DIR

## üìä R√©sultats de l'Audit

### V√©rification Rapide (200 lignes)
- **Statut:** $([[ $quick_result -eq 0 ]] && echo "‚úÖ CONFORME" || echo "‚ùå VIOLATIONS")
- **Outil:** quick_check_lines.py

### Audit Constitutionnel Complet
- **Statut:** $([[ $full_result -eq 0 ]] && echo "‚úÖ CONFORME" || echo "‚ùå NON-CONFORME")
- **Outil:** full_audit.py

## üéØ Verdict Global

EOF

    # Calcul du verdict global
    local global_status="CONFORME"
    if [[ $quick_result -ne 0 ]] || [[ $full_result -ne 0 ]]; then
        global_status="NON-CONFORME"
    fi

    echo "**CONFORMIT√â G√âN√âRALE:** $([[ "$global_status" == "CONFORME" ]] && echo "‚úÖ PROJET CONFORME" || echo "‚ùå ACTIONS CORRECTIVES REQUISES")" >> "$synthesis_file"

    cat >> "$synthesis_file" << EOF

## üìÅ Fichiers G√©n√©r√©s

Les rapports d√©taill√©s sont disponibles dans:
- \`$OUTPUT_DIR\`

## üîß Actions Recommand√©es

$([[ "$global_status" == "CONFORME" ]] && echo "Aucune action requise. Le projet respecte toutes les directives AGI." || echo "1. Consulter les rapports d√©taill√©s
2. Appliquer les corrections recommand√©es
3. Re-ex√©cuter la v√©rification
4. Consulter AGI.md pour les directives compl√®tes")

---
*G√©n√©r√© par verification_compliance_script.sh*
EOF

    log_success "Rapport de synth√®se g√©n√©r√©: $synthesis_file"
}

# Fonction principale
main() {
    # Variables pour les r√©sultats
    local quick_result=0
    local full_result=0

    log_header "SCRIPT DE V√âRIFICATION DE CONFORMIT√â AGI"
    echo "=========================================="
    echo "Version: 2.0 (Corrig√©e)"
    echo "Date: $(date)"
    echo ""

    # V√©rification de l'environnement
    check_environment

    echo ""
    log_info "D√©but de la v√©rification de conformit√©..."
    echo ""

    # √âtape 1: V√©rification rapide
    run_quick_check
    quick_result=$?

    echo ""

    # √âtape 2: Audit complet (si demand√©)
    if [[ "$FULL_AUDIT" == "true" ]]; then
        run_full_audit
        full_result=$?
    else
        log_info "Audit complet non demand√© (utilisez --full-audit)"
        full_result=0  # Consid√©r√© comme neutre
    fi

    echo ""

    # √âtape 3: Rapport de synth√®se
    if [[ -n "$OUTPUT_DIR" ]]; then
        generate_synthesis_report
    fi

    # R√©sum√© final
    echo ""
    log_header "R√âSUM√â FINAL"
    echo "============"

    if [[ $quick_result -eq 0 ]]; then
        log_success "V√©rification rapide: OK"
    else
        log_error "V√©rification rapide: √âCHEC"
    fi

    if [[ "$FULL_AUDIT" == "true" ]]; then
        if [[ $full_result -eq 0 ]]; then
            log_success "Audit complet: OK"
        else
            log_error "Audit complet: √âCHEC"
        fi
    fi

    # Code de sortie global
    if [[ $quick_result -eq 0 ]] && [[ $full_result -eq 0 ]]; then
        log_success "üéâ PROJET CONFORME AUX DIRECTIVES AGI"
        exit 0
    else
        log_error "‚ö†Ô∏è  ACTIONS CORRECTIVES REQUISES"
        exit 1
    fi
}

# Analyse des arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        --target)
            TARGET_DIR="$2"
            shift 2
            ;;
        --full-audit)
            FULL_AUDIT=true
            shift
            ;;
        --output)
            OUTPUT_DIR="$2"
            shift 2
            ;;
        --verbose)
            VERBOSE=true
            shift
            ;;
        --help)
            show_help
            exit 0
            ;;
        *)
            log_error "Option inconnue: $1"
            show_help
            exit 1
            ;;
    esac
done

# Ex√©cution principale
main