#!/usr/bin/env python3
"""
Main - Orchestrateur Principal du Projet AGI
===========================================

R√¥le Fondamental (Conforme AGI.md - main.py) :
- Point d'entr√©e unique et chef d'orchestre principal
- Initialisation du programme et coordination des services essentiels
- Lancement de l'audit de conformit√© initial
- Chargement des plugins conformes
- D√©marrage de l'interface utilisateur
- Gestion globale des erreurs et arr√™t propre

Conformit√© Architecturale :
- Limite stricte < 200 lignes via d√©l√©gation modulaire
- Aucune logique m√©tier directe
- √âtat interne minimal (stateless)
- D√©l√©gation compl√®te aux modules sp√©cialis√©s

Version : 1.0
Date : {date}
R√©f√©rence : Rapport de Directives AGI.md - Section main.py
"""

import sys
import traceback
from pathlib import Path
from typing import Optional, Dict, Any

# Imports essentiels selon d√©l√©gations AGI.md
try:
    from supervisor.logger import Logger
    from config.config_loader import ConfigLoader
    from config.config_validator import ConfigValidator
    from config.config_manager import ConfigManager
    from compliance.static_auditor import StaticAuditor
    from compliance.compliance_reporter import ComplianceReporter
    from plugins.plugin_loader import PluginLoader
    from ui.ui_cli import UICLI
    from ui.ui_web import UIWeb
except ImportError as e:
    print(f"‚ùå Erreur critique import modules: {{e}}")
    sys.exit(1)

class AGIOrchestrator:
    """
    Orchestrateur principal du projet AGI.

    Coordonne l'initialisation et l'ex√©cution selon la s√©quence
    d√©finie dans AGI.md sans contenir de logique m√©tier.
    """

    def __init__(self):
        self.logger: Optional[Logger] = None
        self.config_manager: Optional[ConfigManager] = None
        self.plugins: Dict[str, Any] = {{}}

    def initialize_and_run(self) -> int:
        """
        S√©quence principale d'initialisation et d'ex√©cution.

        Returns:
            int: Code de sortie (0 = succ√®s, 1 = erreur)
        """
        try:
            # √âtape 1: Initialisation du logging (premi√®re priorit√©)
            self.logger = Logger()
            self.logger.info("üöÄ D√©marrage Projet AGI")

            # √âtape 2: Chargement et validation configuration
            if not self._initialize_configuration():
                return 1

            # √âtape 3: Audit de conformit√© initial
            if not self._run_initial_compliance_audit():
                return 1

            # √âtape 4: Chargement des plugins conformes
            if not self._load_and_validate_plugins():
                return 1

            # √âtape 5: D√©marrage de l'interface utilisateur
            if not self._start_user_interface():
                return 1

            self.logger.info("‚úÖ Projet AGI initialis√© avec succ√®s")
            return 0

        except Exception as e:
            if self.logger:
                self.logger.error(f"‚ùå Erreur critique orchestrateur: {{str(e)}}")
                self.logger.debug(f"Traceback: {{traceback.format_exc()}}")
            else:
                print(f"‚ùå Erreur critique avant initialisation logger: {{e}}")
            return 1

    def _initialize_configuration(self) -> bool:
        """D√©l√®gue l'initialisation de la configuration."""
        try:
            loader = ConfigLoader()
            raw_config = loader.load_configuration()

            validator = ConfigValidator()
            validated_config = validator.validate(raw_config)

            self.config_manager = ConfigManager(validated_config)
            self.logger.info("‚úÖ Configuration initialis√©e")
            return True

        except Exception as e:
            self.logger.error(f"‚ùå Erreur initialisation configuration: {{e}}")
            return False

    def _run_initial_compliance_audit(self) -> bool:
        """D√©l√®gue l'audit de conformit√© initial."""
        try:
            auditor = StaticAuditor(self.logger)
            reporter = ComplianceReporter(self.logger)

            # Audit du noyau et des modules critiques
            audit_results = auditor.audit_core_modules()

            # Rapport et d√©cision de blocage si n√©cessaire
            if not reporter.process_audit_results(audit_results):
                self.logger.error("‚ùå Audit de conformit√© √©chou√© - Arr√™t")
                return False

            self.logger.info("‚úÖ Audit de conformit√© initial r√©ussi")
            return True

        except Exception as e:
            self.logger.error(f"‚ùå Erreur audit conformit√©: {{e}}")
            return False

    def _load_and_validate_plugins(self) -> bool:
        """D√©l√®gue le chargement et la validation des plugins."""
        try:
            plugin_loader = PluginLoader(self.logger, self.config_manager)
            self.plugins = plugin_loader.discover_and_load_plugins()

            self.logger.info(f"‚úÖ {{len(self.plugins)}} plugins charg√©s avec succ√®s")
            return True

        except Exception as e:
            self.logger.error(f"‚ùå Erreur chargement plugins: {{e}}")
            return False

    def _start_user_interface(self) -> bool:
        """D√©l√®gue le d√©marrage de l'interface utilisateur."""
        try:
            # S√©lection interface selon configuration
            interface_type = self.config_manager.get('ui.interface_type', 'cli')

            if interface_type == 'web':
                ui = UIWeb(self.logger, self.config_manager, self.plugins)
            else:
                ui = UICLI(self.logger, self.config_manager, self.plugins)

            ui.start()
            self.logger.info(f"‚úÖ Interface {{interface_type}} d√©marr√©e")
            return True

        except Exception as e:
            self.logger.error(f"‚ùå Erreur d√©marrage interface: {{e}}")
            return False

def main() -> None:
    """Point d'entr√©e principal - D√©l√©gation compl√®te √† l'orchestrateur."""
    orchestrator = AGIOrchestrator()
    exit_code = orchestrator.initialize_and_run()
    sys.exit(exit_code)

# === CONFORMIT√â AGI.md ===
# Fichier: main.py
# Limite: < 200 lignes de code ex√©cutable ‚úÖ
# Audit: compliance/static_auditor.py
# Tests: tests/test_main.py

if __name__ == "__main__":
    main()