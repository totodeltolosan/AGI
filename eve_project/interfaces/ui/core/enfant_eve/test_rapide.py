#!/usr/bin/env python3
"""
üöÄ TEST SIMPLE - VALIDATION IMM√âDIATE
Test minimal pour v√©rifier que les modules refactoris√©s fonctionnent.
"""

import sys
import os


def test_simple():
    """Test simple et direct"""
    print("üöÄ TEST SIMPLE DE VALIDATION")
    print("=" * 40)

    # Ajouter le dossier courant au path
    sys.path.insert(0, os.getcwd())

    erreurs = []

    # Test 1: Import AnalyseurBesoins
    try:
        from ia.planificateur_besoins import AnalyseurBesoins

        print("‚úÖ AnalyseurBesoins import√© avec succ√®s")

        # Test fonctionnel simple
        result = AnalyseurBesoins.evaluer_securite_zone(
            {"lumiere": 10, "mobs_hostiles": []}
        )
        if isinstance(result, dict) and "score" in result:
            print(f"‚úÖ AnalyseurBesoins fonctionne (Score: {result['score']})")
        else:
            print("‚ùå AnalyseurBesoins ne fonctionne pas correctement")
            erreurs.append("AnalyseurBesoins: fonction d√©faillante")

    except Exception as e:
        print(f"‚ùå Erreur AnalyseurBesoins: {e}")
        erreurs.append(f"AnalyseurBesoins: {e}")

    # Test 2: Import GenerateurActionsBesoins
    try:
        from ia.planificateur_actions import GenerateurActionsBesoins

        print("‚úÖ GenerateurActionsBesoins import√© avec succ√®s")

        # Test fonctionnel simple
        actions = GenerateurActionsBesoins.actions_survie_immediate(50)
        if isinstance(actions, list) and len(actions) > 0:
            print(f"‚úÖ GenerateurActionsBesoins fonctionne ({len(actions)} actions)")
        else:
            print("‚ùå GenerateurActionsBesoins ne g√©n√®re pas d'actions")
            erreurs.append("GenerateurActionsBesoins: pas d'actions g√©n√©r√©es")

    except Exception as e:
        print(f"‚ùå Erreur GenerateurActionsBesoins: {e}")
        erreurs.append(f"GenerateurActionsBesoins: {e}")

    # Test 3: Import Plan
    try:
        from ia.planificateur_plans import Plan

        print("‚úÖ Plan import√© avec succ√®s")

        # Test fonctionnel simple - LE TEST CRITIQUE !
        plan = Plan("Test Plan", [{"type": "ACTION_TEST"}])
        if plan and plan.nom == "Test Plan" and plan.a_des_actions():
            print("‚úÖ Plan fonctionne correctement")

            # Test compatibilit√© dictionnaire
            plan_dict = plan.to_dict()
            if isinstance(plan_dict, dict) and "nom" in plan_dict:
                print("‚úÖ Compatibilit√© dictionnaire OK")
            else:
                print("‚ùå Probl√®me compatibilit√© dictionnaire")
                erreurs.append("Plan: compatibilit√© dictionnaire")
        else:
            print("‚ùå Plan ne fonctionne pas correctement")
            erreurs.append("Plan: fonctionnement incorrect")

    except Exception as e:
        print(f"‚ùå Erreur Plan: {e}")
        erreurs.append(f"Plan: {e}")

    # Test 4: Test r√©solution erreur "0"
    try:
        from ia.planificateur_actions import GenerateurActionsBesoins
        from ia.planificateur_plans import Plan

        print("\nüéØ TEST CRITIQUE - R√âSOLUTION ERREUR '0'")

        # Simulation exacte du cas probl√©matique
        for i in range(3):
            actions = GenerateurActionsBesoins.actions_survie_immediate(80)
            plan = Plan(f"Survie {i+1}", actions)

            if not plan or not actions or len(actions) == 0:
                print(f"‚ùå Test {i+1}: G√©n√©ration √©chou√©e!")
                erreurs.append(f"Erreur '0' non r√©solue - test {i+1}")
            else:
                print(f"‚úÖ Test {i+1}: Plan g√©n√©r√© avec succ√®s")

        if len([e for e in erreurs if "Erreur '0'" in e]) == 0:
            print("üéâ ERREUR '0' D√âFINITIVEMENT R√âSOLUE!")

    except Exception as e:
        print(f"‚ùå Erreur test r√©solution '0': {e}")
        erreurs.append(f"Test r√©solution '0': {e}")

    # Rapport final
    print("\n" + "=" * 40)
    print("üìä R√âSULTAT FINAL")
    print("=" * 40)

    if len(erreurs) == 0:
        print("üéâ SUCC√àS TOTAL!")
        print("‚úÖ Tous les modules refactoris√©s fonctionnent parfaitement")
        print("‚úÖ Le probl√®me 'Erreur g√©n√©ration plan survie: 0' est R√âSOLU")
        print("‚úÖ La refactorisation est UN SUCC√àS COMPLET!")
        return True
    else:
        print(f"‚ùå {len(erreurs)} erreur(s) d√©tect√©e(s):")
        for erreur in erreurs:
            print(f"   ‚Ä¢ {erreur}")
        return False


def verification_fichiers():
    """V√©rifie que tous les fichiers refactoris√©s sont pr√©sents"""
    print("\nüîç V√âRIFICATION FICHIERS REFACTORIS√âS")
    print("-" * 40)

    fichiers_requis = [
        "ia/planificateur_besoins.py",
        "ia/planificateur_actions.py",
        "ia/planificateur_exploration.py",
        "ia/planificateur_construction.py",
        "ia/planificateur_plans.py",
        "ia/planificateur.py",
    ]

    for fichier in fichiers_requis:
        if os.path.exists(fichier):
            print(f"‚úÖ {fichier}")
        else:
            print(f"‚ùå {fichier} MANQUANT!")
            return False

    print("‚úÖ Tous les fichiers refactoris√©s sont pr√©sents")
    return True


def main():
    """Point d'entr√©e principal"""
    if verification_fichiers():
        return test_simple()
    else:
        print("‚ùå Fichiers manquants - v√©rifiez l'installation")
        return False


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
