#!/usr/bin/env python3
"""
Reporter - G√©n√©rateur de Rapports d'Audit Constitutionnel
==========================================================

CHEMIN: compliance/reporter.py

R√¥le Fondamental (Conforme iaGOD.json) :
- G√©n√©rer rapports d'audit lisibles et actionnables
- Formater sorties console et fichiers selon standards AGI
- Respecter directive < 200 lignes (version optimis√©e)
"""

import logging
from typing import List, Dict, Any
from pathlib import Path
from .basic_auditor import ViolationReport

class ConstitutionalReporter:
    """G√©n√©rateur de Rapports Constitutionnels AGI"""
    
    def __init__(self):
        self.logger = logging.getLogger(__name__)
    
    def generate_console_report(self, violations: List[ViolationReport]) -> str:
        """G√©n√®re un rapport console format√©"""
        if not violations:
            return self._generate_success_report()
        
        report_lines = [
            "üö® RAPPORT D'AUDIT CONSTITUTIONNEL AGI",
            "=" * 50, "",
            f"üìä STATISTIQUES:",
            f"   ‚Ä¢ Total violations: {len(violations)}",
            f"   ‚Ä¢ Violations critiques: {len([v for v in violations if v.severity == 'CRITICAL'])}",
            f"   ‚Ä¢ Violations moyennes: {len([v for v in violations if v.severity == 'MEDIUM'])}",
            "", "üîç D√âTAIL DES VIOLATIONS:", "-" * 30
        ]
        
        # Grouper par s√©v√©rit√© et formater
        for severity, name in [("CRITICAL", "CRITIQUES"), ("MEDIUM", "MOYENNES"), ("LOW", "MINEURES")]:
            severity_violations = [v for v in violations if v.severity == severity]
            if severity_violations:
                report_lines.extend(self._format_violations_group(name, severity_violations))
        
        # Recommandations
        report_lines.extend([
            "", "üí° RECOMMANDATIONS:", "-" * 20,
            "1. Corriger les violations CRITIQUES en priorit√©",
            "2. Refactoriser les fichiers > 200 lignes selon architecture AGI",
            "3. Ajouter les en-t√™tes constitutionnels manquants",
            "4. Consulter iaGOD.json pour les directives compl√®tes",
            "", "üìö RESSOURCES:",
            "   ‚Ä¢ Constitution: iaGOD.json",
            "   ‚Ä¢ Architecture: AGI.md",
            "   ‚Ä¢ Aide: python run_agi_audit.py --help"
        ])
        
        return "\n".join(report_lines)
    
    def _generate_success_report(self) -> str:
        """G√©n√®re un rapport de succ√®s (aucune violation)"""
        return """
‚úÖ AUDIT CONSTITUTIONNEL R√âUSSI

üèõÔ∏è  CONFORMIT√â TOTALE √Ä iaGOD.json
   Aucune violation constitutionnelle d√©tect√©e.
   
üìä R√âSULTATS:
   ‚Ä¢ Fichiers audit√©s: Conformes
   ‚Ä¢ Limite 200 lignes: Respect√©e
   ‚Ä¢ Syntaxe Python: Valide
   ‚Ä¢ Pratiques AGI: Conformes

üéØ STATUT: PROJET CONSTITUTIOMELLEMENT CONFORME
   
üëè F√©licitations ! Votre projet AGI est exemplaire.
"""
    
    def _format_violations_group(self, group_name: str, violations: List[ViolationReport]) -> List[str]:
        """Formate un groupe de violations"""
        lines = [f"", f"‚ùå VIOLATIONS {group_name} ({len(violations)}):"]
        
        for i, violation in enumerate(violations, 1):
            lines.extend([
                f"", f"   {i}. {violation.law_name} (ID: {violation.law_id})",
                f"      üìÅ Fichier: {violation.file_path}",
                f"      üìç Ligne: {violation.line_number}",
                f"      üìù Description: {violation.description}"
            ])
            
            if violation.suggested_fix:
                lines.append(f"      üí° Solution: {violation.suggested_fix}")
        
        return lines
    
    def generate_github_comment(self, violations: List[ViolationReport]) -> str:
        """G√©n√®re un commentaire GitHub pour Pull Request"""
        if not violations:
            return """## ‚úÖ Audit Constitutionnel R√©ussi

üèõÔ∏è **Conformit√© Totale √† iaGOD.json**

**Statut**: ‚úÖ CONFORME
**Action**: Pull Request approuv√©e par l'audit constitutionnel
"""
        
        critical_count = len([v for v in violations if v.severity == "CRITICAL"])
        comment_lines = [
            "## üö® Audit Constitutionnel √âchou√©", "",
            f"**Violations d√©tect√©es**: {len(violations)}",
            f"**Violations critiques**: {critical_count}", "",
            "### üìã R√©sum√© des Violations", ""
        ]
        
        # Limiter √† 5 violations pour √©viter les commentaires trop longs
        displayed_violations = violations[:5]
        
        for violation in displayed_violations:
            severity_emoji = {"CRITICAL": "üî¥", "MEDIUM": "üü°", "LOW": "üü¢"}.get(violation.severity, "‚ö™")
            comment_lines.extend([
                f"**{severity_emoji} {violation.law_name}**",
                f"- üìÅ `{violation.file_path}:{violation.line_number}`",
                f"- üìù {violation.description}", ""
            ])
        
        if len(violations) > 5:
            comment_lines.append(f"*... et {len(violations) - 5} autres violations*")
        
        comment_lines.extend([
            "", "### üîß Actions Requises",
            "1. Corriger les violations critiques avant merge",
            "2. Consulter `iaGOD.json` pour les directives compl√®tes", 
            "3. Relancer l'audit: `python run_agi_audit.py --full`", "",
            "---", "*Audit automatique mandat√© par la Loi DEV-TOOL-002 de iaGOD.json*"
        ])
        
        return "\n".join(comment_lines)
    
    def save_detailed_report(self, violations: List[ViolationReport], output_path: Path):
        """Sauvegarde un rapport d√©taill√© dans un fichier"""
        try:
            detailed_report = self.generate_console_report(violations)
            with open(output_path, 'w', encoding='utf-8') as f:
                f.write(detailed_report)
            self.logger.info(f"Rapport d√©taill√© sauvegard√©: {output_path}")
        except Exception as e:
            self.logger.error(f"Erreur sauvegarde rapport {output_path}: {e}")
