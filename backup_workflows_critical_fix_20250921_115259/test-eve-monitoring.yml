name: 🔬 Test Eve System Monitoring

on:
  push:
    paths: ['eve/development/monitoring/**']
  schedule:
    - cron: '*/15 * * * *'  # Toutes les 15 minutes

jobs:
  test-eve-monitoring:
    name: Test Eve SystemMonitor
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Monitoring Environment
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install Monitoring Dependencies
      run: |
        pip install psutil prometheus-client grafana-api
        pip install system-monitoring network-monitoring
        pip install pytest-monitoring pytest-system
        
    - name: Test Eve SystemMonitor Core
      run: |
        cd eve/development/monitoring/
        
        echo "🔬 TEST EVE SYSTEM MONITOR"
        python -c "
        try:
            from system_monitor import EveSystemMonitor
            from git_integration import GitMonitor
            
            # Initialiser monitoring
            monitor = EveSystemMonitor()
            git_monitor = GitMonitor()
            
            print('✅ Test Eve SystemMonitor: Initialisation OK')
            
            # Test monitoring système
            system_stats = monitor.get_system_stats()
            print(f'✅ Stats système: CPU, RAM, Disk OK')
            
            # Test monitoring Git
            git_stats = git_monitor.get_git_status()
            print(f'✅ Stats Git: Repository status OK')
            
        except Exception as e:
            print(f'⚠️ Test Eve Monitor: {e}')
            print('Note: Modules Test Eve en migration')
        "
        
    - name: System Resource Monitoring
      run: |
        echo "📊 MONITORING RESSOURCES SYSTÈME" > monitoring-report.md
        echo "===============================" >> monitoring-report.md
        echo "" >> monitoring-report.md
        
        python -c "
        import psutil
        import time
        import json
        
        print('## 💻 État Système Actuel')
        
        # CPU
        cpu_percent = psutil.cpu_percent(interval=1)
        cpu_count = psutil.cpu_count()
        print(f'- **CPU**: {cpu_percent}% (Cores: {cpu_count})')
        
        # Mémoire
        memory = psutil.virtual_memory()
        print(f'- **RAM**: {memory.percent}% utilisé ({memory.used // (1024**3)}GB / {memory.total // (1024**3)}GB)')
        
        # Disque
        disk = psutil.disk_usage('/')
        print(f'- **Disque**: {disk.percent}% utilisé ({disk.used // (1024**3)}GB / {disk.total // (1024**3)}GB)')
        
        # Processus
        processes = len(psutil.pids())
        print(f'- **Processus**: {processes} actifs')
        
        print('')
        
        # Monitoring continu sur 5 minutes
        print('## 📈 Monitoring Continu (5 min)')
        
        samples = []
        for i in range(5):  # 5 échantillons sur 1 minute
            sample = {
                'time': time.time(),
                'cpu': psutil.cpu_percent(),
                'memory': psutil.virtual_memory().percent,
                'disk': psutil.disk_usage('/').percent
            }
            samples.append(sample)
            time.sleep(12)  # 12 secondes entre échantillons
            print(f'Échantillon {i+1}/5: CPU {sample[\"cpu\"]}%, RAM {sample[\"memory\"]}%')
        
        # Analyse tendances
        avg_cpu = sum(s['cpu'] for s in samples) / len(samples)
        avg_memory = sum(s['memory'] for s in samples) / len(samples)
        
        print(f'- **CPU moyen**: {avg_cpu:.1f}%')
        print(f'- **RAM moyenne**: {avg_memory:.1f}%')
        
        if avg_cpu > 80:
            print('- **Alerte**: CPU élevé')
        elif avg_memory > 80:
            print('- **Alerte**: RAM élevée')
        else:
            print('- **Statut**: Système stable')
        " >> monitoring-report.md
        
    - name: Git Repository Monitoring
      run: |
        echo "" >> monitoring-report.md
        echo "## 📁 Monitoring Repository Git" >> monitoring-report.md
        
        # Stats Git
        commits_today=$(git log --since="1 day ago" --oneline | wc -l)
        total_commits=$(git rev-list --all --count 2>/dev/null || echo "N/A")
        current_branch=$(git branch --show-current)
        repo_size=$(du -sh .git 2>/dev/null | cut -f1 || echo "N/A")
        
        echo "- **Branche actuelle**: $current_branch" >> monitoring-report.md
        echo "- **Commits aujourd'hui**: $commits_today" >> monitoring-report.md
        echo "- **Total commits**: $total_commits" >> monitoring-report.md
        echo "- **Taille repository**: $repo_size" >> monitoring-report.md
        
        # Vérifier état working directory
        if git diff --quiet && git diff --cached --quiet; then
          echo "- **Working Directory**: ✅ Propre" >> monitoring-report.md
        else
          modified_files=$(git status --porcelain | wc -l)
          echo "- **Working Directory**: ⚠️ $modified_files fichiers modifiés" >> monitoring-report.md
        fi
        
    - name: Project Health Monitoring
      run: |
        echo "" >> monitoring-report.md
        echo "## 🏥 Santé Projet AGI-EVE" >> monitoring-report.md
        
        # Compter fichiers par module
        for module in "core" "eve" "tools"; do
          if [ -d "$module" ]; then
            file_count=$(find "$module" -name "*.py" | wc -l)
            line_count=$(find "$module" -name "*.py" -exec wc -l {} + 2>/dev/null | tail -1 | awk '{print $1}' || echo "0")
            echo "- **Module $module**: $file_count fichiers, $line_count lignes" >> monitoring-report.md
          fi
        done
        
        # Violations de conformité
        if [ -f "conformite_$(date +%Y%m%d).csv" ]; then
          violations=$(grep -c "VIOLATION" "conformite_$(date +%Y%m%d).csv" 2>/dev/null || echo "0")
          echo "- **Violations conformité**: $violations détectées" >> monitoring-report.md
        else
          echo "- **Conformité**: Rapport non généré aujourd'hui" >> monitoring-report.md
        fi
        
        # Alertes critiques
        critical_files=$(find . -name "*.py" -exec sh -c 'lines=$(wc -l < "$1" 2>/dev/null || echo 0); if [ $lines -gt 1000 ]; then echo "$1: $lines lignes"; fi' _ {} \; | wc -l)
        if [ $critical_files -gt 0 ]; then
          echo "- **🚨 Alerte**: $critical_files fichiers >1000 lignes" >> monitoring-report.md
        else
          echo "- **✅ Santé**: Aucun fichier critique détecté" >> monitoring-report.md
        fi
        
    - name: Upload Monitoring Reports
      uses: actions/upload-artifact@v3
      with:
        name: test-eve-monitoring-report
        path: monitoring-report.md
