#!/usr/bin/env python3
"""
CHEMIN: tools/compliance_audit_system/utils/logger_factory.py

R√¥le Fondamental (Conforme iaGOD.json) :
- Module de support.
- Ce fichier respecte la constitution AGI.
"""

#!/usr/bin/env python3
"""
Fabrique de Loggers - Syst√®me d'Audit AGI
Responsabilit√© unique : Cr√©ation et configuration des loggers pour tra√ßabilit√©
Respecte strictement la directive des 200 lignes
"""

import logging
import sys
from pathlib import Path
from typing import Optional, Dict
from datetime import datetime


class AGILogger:
    """Logger sp√©cialis√© pour le syst√®me d'audit AGI"""

    def __init__(
        """TODO: Add docstring."""
        self,
        name: str,
        level: int = logging.INFO,
        log_file: Optional[Path] = None,
        verbose: bool = False,
    ):
        self.name = name
        self.logger = logging.getLogger(name)
        self.logger.setLevel(level)

        # √âviter la duplication des handlers
        if not self.logger.handlers:
            self._setup_handlers(log_file, verbose)

    def _setup_handlers(self, log_file: Optional[Path], verbose: bool):
        """Configure les handlers de logging"""

        # Handler console
        console_handler = logging.StreamHandler(sys.stdout)
        console_level = logging.DEBUG if verbose else logging.INFO
        console_handler.setLevel(console_level)

        # Format console (color√© si possible)
        if self._supports_color():
            console_formatter = ColoredFormatter(
                "%(asctime)s | %(levelname)s | %(name)s | %(message)s",
                datefmt="%H:%M:%S",
            )
        else:
            console_formatter = logging.Formatter(
                "%(asctime)s | %(levelname)s | %(name)s | %(message)s",
                datefmt="%H:%M:%S",
            )

        console_handler.setFormatter(console_formatter)
        self.logger.addHandler(console_handler)

        # Handler fichier (si sp√©cifi√©)
        if log_file:
            file_handler = logging.FileHandler(log_file, encoding="utf-8")
            file_handler.setLevel(logging.DEBUG)  # Toujours debug dans le fichier

            file_formatter = logging.Formatter(
                "%(asctime)s | %(levelname)8s | %(name)20s | %(funcName)15s:%(lineno)4d | %(message)s",
                datefmt="%Y-%m-%d %H:%M:%S",
            )
            file_handler.setFormatter(file_formatter)
            self.logger.addHandler(file_handler)

    def _supports_color(self) -> bool:
        """V√©rifie si le terminal supporte les couleurs"""
        return (
            hasattr(sys.stdout, "isatty")
            and sys.stdout.isatty()
            and ("TERM" in os.environ or sys.platform == "win32")
        )

    def info(self, message: str, **kwargs):
        """Log niveau info avec contexte AGI"""
        self.logger.info(f"üîç {message}", **kwargs)

    def success(self, message: str, **kwargs):
        """Log pour succ√®s (niveau info avec √©moji)"""
        self.logger.info(f"‚úÖ {message}", **kwargs)

    def warning(self, message: str, **kwargs):
        """Log niveau warning avec contexte AGI"""
        self.logger.warning(f"‚ö†Ô∏è {message}", **kwargs)

    def error(self, message: str, **kwargs):
        """Log niveau error avec contexte AGI"""
        self.logger.error(f"‚ùå {message}", **kwargs)

    def debug(self, message: str, **kwargs):
        """Log niveau debug avec contexte AGI"""
        self.logger.debug(f"üîß {message}", **kwargs)

    def audit_event(self, event_type: str, details: str, **kwargs):
        """Log sp√©cialis√© pour les √©v√©nements d'audit"""
        self.logger.info(f"üèõÔ∏è [{event_type}] {details}", **kwargs)


class ColoredFormatter(logging.Formatter):
    """Formateur de logs color√© pour terminal"""

    """TODO: Add docstring."""
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.colors = {
            "DEBUG": "\033[36m",  # Cyan
            "INFO": "\033[37m",  # Blanc
            "WARNING": "\033[33m",  # Jaune
            "ERROR": "\033[31m",  # Rouge
            "CRITICAL": "\033[35m",  # Magenta
            "RESET": "\033[0m",  # Reset
        }
            """TODO: Add docstring."""

    def format(self, record):
        # Coloration du niveau de log
        level_color = self.colors.get(record.levelname, self.colors["RESET"])
        record.levelname = f"{level_color}{record.levelname}{self.colors['RESET']}"

        # Coloration du nom du logger
        record.name = f"\033[34m{record.name}\033[0m"  # Bleu

        return super().format(record)


class LoggerFactory:
    """Fabrique centralis√©e de loggers AGI"""

    _instances: Dict[str, AGILogger] = {}
    _global_config = {
        "default_level": logging.INFO,
        "log_directory": None,
        "enable_file_logging": False,
        "verbose_mode": False,
    }

    @classmethod
    def configure_global(
        cls,
        level: int = logging.INFO,
        log_directory: Optional[Path] = None,
        enable_file_logging: bool = False,
        verbose_mode: bool = False,
    ):
        """Configure les param√®tres globaux de logging"""
        cls._global_config.update(
            {
                "default_level": level,
                "log_directory": log_directory,
                "enable_file_logging": enable_file_logging,
                "verbose_mode": verbose_mode,
            }
        )

        # Cr√©ation du r√©pertoire de logs si n√©cessaire
        if log_directory and enable_file_logging:
            log_directory.mkdir(parents=True, exist_ok=True)

    @classmethod
    def create_logger(cls, name: str, verbose: Optional[bool] = None) -> AGILogger:
        """Cr√©e ou r√©cup√®re un logger AGI"""

        # Utilisation de la configuration globale si verbose non sp√©cifi√©
        if verbose is None:
            verbose = cls._global_config["verbose_mode"]

        # R√©utilisation d'instance existante
        cache_key = f"{name}_{verbose}"
        if cache_key in cls._instances:
            return cls._instances[cache_key]

        # D√©termination du fichier de log
        log_file = None
        if (
            cls._global_config["enable_file_logging"]
            and cls._global_config["log_directory"]
        ):
            timestamp = datetime.now().strftime("%Y%m%d")
            log_file = (
                cls._global_config["log_directory"]
                / f"agi_audit_{name}_{timestamp}.log"
            )

        # Cr√©ation du logger
        logger = AGILogger(
            name=name,
            level=cls._global_config["default_level"],
            log_file=log_file,
            verbose=verbose,
        )

        # Cache de l'instance
        cls._instances[cache_key] = logger

        return logger

    @classmethod
    def get_audit_logger(cls, component_name: str, verbose: bool = False) -> AGILogger:
        """Raccourci pour cr√©er un logger d'audit sp√©cialis√©"""
        return cls.create_logger(f"audit.{component_name}", verbose)

    @classmethod
    def get_validator_logger(
        cls, validator_name: str, verbose: bool = False
    ) -> AGILogger:
        """Raccourci pour cr√©er un logger de validateur"""
        return cls.create_logger(f"validator.{validator_name}", verbose)

    @classmethod
    def get_analyzer_logger(
        cls, analyzer_name: str, verbose: bool = False
    ) -> AGILogger:
        """Raccourci pour cr√©er un logger d'analyseur"""
        return cls.create_logger(f"analyzer.{analyzer_name}", verbose)

    @classmethod
    def clear_cache(cls):
        """Vide le cache des loggers (utile pour les tests)"""
        cls._instances.clear()


# Import n√©cessaire pour les couleurs
import os


# Fonctions utilitaires
def create_logger(name: str, verbose: bool = False) -> AGILogger:
    """Fonction utilitaire pour cr√©er un logger"""
    return LoggerFactory.create_logger(name, verbose)


def setup_audit_logging(
    log_directory: Optional[Path] = None,
    verbose: bool = False,
    level: int = logging.INFO,
):
    """Configuration rapide du syst√®me de logging d'audit"""
    LoggerFactory.configure_global(
        level=level,
        log_directory=log_directory,
        enable_file_logging=log_directory is not None,
        verbose_mode=verbose,
    )


def get_component_logger(
    component_type: str, component_name: str, verbose: bool = False
) -> AGILogger:
    """Obtient un logger pour un composant sp√©cifique"""

    logger_getters = {
        "audit": LoggerFactory.get_audit_logger,
        "validator": LoggerFactory.get_validator_logger,
        "analyzer": LoggerFactory.get_analyzer_logger,
    }

    if component_type in logger_getters:
        return logger_getters[component_type](component_name, verbose)
    else:
        return LoggerFactory.create_logger(
            f"{component_type}.{component_name}", verbose
        )


if __name__ == "__main__":
    # Test du syst√®me de logging
    import tempfile

    print("üß™ Test du syst√®me de logging AGI")
    print("=" * 40)

    # Configuration pour les tests
    with tempfile.TemporaryDirectory() as temp_dir:
        log_dir = Path(temp_dir)
        setup_audit_logging(log_dir, verbose=True)

        # Test des diff√©rents types de loggers
        audit_logger = LoggerFactory.get_audit_logger("test_component", verbose=True)
        validator_logger = LoggerFactory.get_validator_logger("line_validator")
        analyzer_logger = LoggerFactory.get_analyzer_logger("ast_analyzer")

        # Test des diff√©rents niveaux
        audit_logger.info("D√©but de l'audit de test")
        audit_logger.success("Composant valid√© avec succ√®s")
        audit_logger.warning("Violation d√©tect√©e")
        audit_logger.error("Erreur lors de l'analyse")
        audit_logger.debug("Information de d√©bogage")
        audit_logger.audit_event("VALIDATION", "Fichier test.py analys√©")

        validator_logger.info("Validation des lignes en cours")
        analyzer_logger.info("Analyse AST termin√©e")

        print(f"Logs sauvegard√©s dans: {log_dir}")

        # Affichage des fichiers cr√©√©s
        log_files = list(log_dir.glob("*.log"))
        print(f"Fichiers de log cr√©√©s: {len(log_files)}")
        for log_file in log_files:
            print(f"  - {log_file.name}")