#!/usr/bin/env python3
"""
DIRECTIVE CONSTITUTIONNELLE : DASHBOARD-GEN-v3.0 (CONFORME)
G√©n√©rateur du Poste de Commandement Constitutionnel AGI-EVE

Ce script respecte la limite constitutionnelle de 200 lignes via d√©l√©gation modulaire.
Architecture conforme : Orchestrateur + D√©l√©gu√©s sp√©cialis√©s.
"""

import sys
from pathlib import Path
from datetime import datetime
import logging

# D√©l√©gu√©s sp√©cialis√©s (conformes 200 lignes chacun)
try:
    from .dashboard_core.constitutional_collector import ConstitutionalDataCollector
    from .dashboard_core.git_collector import GitDataCollector
    from .dashboard_core.template_manager import TemplateManager
    from .dashboard_core.chart_generator import ChartGenerator
    from .dashboard_core.dashboard_orchestrator import DashboardOrchestrator
except ImportError:
    # Fallback pour ex√©cution directe
    sys.path.append(str(Path(__file__).parent))
    from dashboard_core.constitutional_collector import ConstitutionalDataCollector
    from dashboard_core.git_collector import GitDataCollector
    from dashboard_core.template_manager import TemplateManager
    from dashboard_core.chart_generator import ChartGenerator
    from dashboard_core.dashboard_orchestrator import DashboardOrchestrator

# Configuration du logging constitutionnel
logging.basicConfig(
    level=logging.INFO, 
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def validate_dependencies():
    """Valide la pr√©sence des d√©pendances obligatoires."""
    try:
        import git, jinja2, plotly
        return True
    except ImportError as e:
        logger.error(f"‚ùå D√©pendance manquante: {e}")
        print(f"üí° Solution: pip install gitpython jinja2 plotly")
        return False

def main():
    """Point d'entr√©e principal - Orchestrateur constitutionnel."""
    logger.info("üöÄ DASHBOARD-GEN-v3.0 - G√©n√©rateur Constitutionnel (CONFORME)")
    
    try:
        # Validation des pr√©requis
        if not validate_dependencies():
            sys.exit(1)
            
        # D√©tection du r√©pertoire racine
        project_root = Path.cwd()
        start_time = datetime.now()
        
        # Orchestration via d√©l√©gation (pattern constitutionnel)
        orchestrator = DashboardOrchestrator(project_root)
        success = orchestrator.generate_complete_dashboard()
        
        # Mesure de performance
        execution_time = (datetime.now() - start_time).total_seconds()
        
        if success:
            logger.info(f"‚úÖ Dashboard g√©n√©r√© en {execution_time:.2f}s")
            print(f"\n‚úÖ SUCC√àS: Poste de Commandement op√©rationnel!")
            print(f"üìÑ Fichier: {project_root}/AGI_Dashboard.html")
            print(f"üåê Ouvrez le fichier dans votre navigateur")
            sys.exit(0)
        else:
            logger.error("‚ùå √âchec de la g√©n√©ration")
            sys.exit(1)
            
    except KeyboardInterrupt:
        print(f"\n‚ö†Ô∏è G√©n√©ration interrompue")
        sys.exit(130)
    except Exception as e:
        logger.error(f"üí• Erreur fatale: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
